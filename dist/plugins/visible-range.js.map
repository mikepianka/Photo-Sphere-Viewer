{"version":3,"file":"visible-range.js","sources":["../../src/plugins/visible-range/index.js"],"sourcesContent":["import * as THREE from 'three';\r\nimport { AbstractPlugin, CONSTANTS, utils } from '../..';\r\n\r\n\r\n/**\r\n * @typedef {Object} PSV.plugins.VisibleRangePlugin.Options\r\n * @property {double[]|string[]} [latitudeRange] - latitude range as two angles\r\n * @property {double[]|string[]} [longitudeRange] - longitude range as two angles\r\n * @property {boolean} [usePanoData=false] - use panoData as visible range, you can also manually call `setRangesFromPanoData`\r\n */\r\n\r\nconst EPS = 0.000001;\r\n\r\n/**\r\n * @summary Locks visible longitude and/or latitude\r\n * @extends PSV.plugins.AbstractPlugin\r\n * @memberof PSV.plugins\r\n */\r\nexport class VisibleRangePlugin extends AbstractPlugin {\r\n\r\n  static id = 'visible-range';\r\n\r\n  /**\r\n   * @param {PSV.Viewer} psv\r\n   * @param {PSV.plugins.VisibleRangePlugin.Options} options\r\n   */\r\n  constructor(psv, options) {\r\n    super(psv);\r\n\r\n    /**\r\n     * @member {PSV.plugins.VisibleRangePlugin.Options}\r\n     * @private\r\n     */\r\n    this.config = {\r\n      latitudeRange : null,\r\n      longitudeRange: null,\r\n      usePanoData   : false,\r\n      ...options,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @package\r\n   */\r\n  init() {\r\n    super.init();\r\n\r\n    this.psv.on(CONSTANTS.EVENTS.PANORAMA_LOADED, this);\r\n    this.psv.on(CONSTANTS.EVENTS.POSITION_UPDATED, this);\r\n    this.psv.on(CONSTANTS.EVENTS.ZOOM_UPDATED, this);\r\n    this.psv.on(CONSTANTS.CHANGE_EVENTS.GET_ANIMATE_POSITION, this);\r\n    this.psv.on(CONSTANTS.CHANGE_EVENTS.GET_ROTATE_POSITION, this);\r\n\r\n    this.setLatitudeRange(this.config.latitudeRange);\r\n    this.setLongitudeRange(this.config.longitudeRange);\r\n  }\r\n\r\n  /**\r\n   * @package\r\n   */\r\n  destroy() {\r\n    this.psv.off(CONSTANTS.EVENTS.PANORAMA_LOADED, this);\r\n    this.psv.off(CONSTANTS.EVENTS.POSITION_UPDATED, this);\r\n    this.psv.off(CONSTANTS.EVENTS.ZOOM_UPDATED, this);\r\n    this.psv.off(CONSTANTS.CHANGE_EVENTS.GET_ANIMATE_POSITION, this);\r\n    this.psv.off(CONSTANTS.CHANGE_EVENTS.GET_ROTATE_POSITION, this);\r\n\r\n    super.destroy();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  // eslint-disable-next-line consistent-return\r\n  handleEvent(e) {\r\n    let sidesReached;\r\n    let rangedPosition;\r\n    let currentPosition;\r\n\r\n    switch (e.type) {\r\n      case CONSTANTS.CHANGE_EVENTS.GET_ANIMATE_POSITION:\r\n      case CONSTANTS.CHANGE_EVENTS.GET_ROTATE_POSITION:\r\n        currentPosition = e.value;\r\n        ({ rangedPosition } = this.applyRanges(currentPosition));\r\n\r\n        return rangedPosition;\r\n\r\n      case CONSTANTS.EVENTS.POSITION_UPDATED:\r\n        currentPosition = e.args[0];\r\n        ({ sidesReached, rangedPosition } = this.applyRanges(currentPosition));\r\n\r\n        if ((sidesReached.left || sidesReached.right) && this.psv.isAutorotateEnabled()) {\r\n          this.__reverseAutorotate(sidesReached.left, sidesReached.right);\r\n        }\r\n        else if (Math.abs(currentPosition.longitude - rangedPosition.longitude) > EPS\r\n          || Math.abs(currentPosition.latitude - rangedPosition.latitude) > EPS) {\r\n          this.psv.dynamics.position.setValue(rangedPosition);\r\n        }\r\n        break;\r\n\r\n      case CONSTANTS.EVENTS.PANORAMA_LOADED:\r\n        if (this.config.usePanoData) {\r\n          this.setRangesFromPanoData();\r\n        }\r\n        break;\r\n\r\n      case CONSTANTS.EVENTS.ZOOM_UPDATED:\r\n        currentPosition = this.psv.getPosition();\r\n        ({ rangedPosition } = this.applyRanges(currentPosition));\r\n\r\n        if (Math.abs(currentPosition.longitude - rangedPosition.longitude) > EPS\r\n          || Math.abs(currentPosition.latitude - rangedPosition.latitude) > EPS) {\r\n          this.psv.rotate(rangedPosition);\r\n        }\r\n        break;\r\n\r\n      default:\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @summary Changes the latitude range\r\n   * @param {double[]|string[]} range - latitude range as two angles\r\n   */\r\n  setLatitudeRange(range) {\r\n    // latitude range must have two values\r\n    if (range && range.length !== 2) {\r\n      utils.logWarn('latitude range must have exactly two elements');\r\n      range = null;\r\n    }\r\n    // latitude range must be ordered\r\n    else if (range && range[0] > range[1]) {\r\n      utils.logWarn('latitude range values must be ordered');\r\n      range = [range[1], range[0]];\r\n    }\r\n    // latitude range is between -PI/2 and PI/2\r\n    if (range) {\r\n      this.config.latitudeRange = range.map(angle => utils.parseAngle(angle, true));\r\n    }\r\n    else {\r\n      this.config.latitudeRange = null;\r\n    }\r\n\r\n    if (this.psv.prop.ready) {\r\n      this.psv.rotate(this.psv.getPosition());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @summary Changes the longitude range\r\n   * @param {double[]|string[]} range - longitude range as two angles\r\n   */\r\n  setLongitudeRange(range) {\r\n    // longitude range must have two values\r\n    if (range && range.length !== 2) {\r\n      utils.logWarn('longitude range must have exactly two elements');\r\n      range = null;\r\n    }\r\n    // longitude range is between 0 and 2*PI\r\n    if (range) {\r\n      this.config.longitudeRange = range.map(angle => utils.parseAngle(angle));\r\n    }\r\n    else {\r\n      this.config.longitudeRange = null;\r\n    }\r\n\r\n    if (this.psv.prop.ready) {\r\n      this.psv.rotate(this.psv.getPosition());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @summary Changes the latitude and longitude ranges according the current panorama cropping data\r\n   */\r\n  setRangesFromPanoData() {\r\n    this.setLatitudeRange(this.getPanoLatitudeRange());\r\n    this.setLongitudeRange(this.getPanoLongitudeRange());\r\n  }\r\n\r\n  /**\r\n   * @summary Gets the latitude range defined by the viewer's panoData\r\n   * @returns {double[]|null}\r\n   * @private\r\n   */\r\n  getPanoLatitudeRange() {\r\n    const p = this.psv.prop.panoData;\r\n    if (p.croppedHeight === p.fullHeight && p.croppedY === 0) {\r\n      return null;\r\n    }\r\n    else {\r\n      const latitude = y => Math.PI * (1 - y / p.fullHeight) - (Math.PI / 2);\r\n      return [latitude(p.croppedY), latitude(p.croppedY + p.croppedHeight)];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @summary Gets the longitude range defined by the viewer's panoData\r\n   * @returns {double[]|null}\r\n   * @private\r\n   */\r\n  getPanoLongitudeRange() {\r\n    const p = this.psv.prop.panoData;\r\n    if (p.croppedWidth === p.fullWidth && p.croppedX === 0) {\r\n      return null;\r\n    }\r\n    else {\r\n      const longitude = x => 2 * Math.PI * (x / p.fullWidth) - Math.PI;\r\n      return [longitude(p.croppedX), longitude(p.croppedX + p.croppedWidth)];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @summary Apply \"longitudeRange\" and \"latitudeRange\"\r\n   * @param {PSV.Position} position\r\n   * @returns {{rangedPosition: PSV.Position, sidesReached: string[]}}\r\n   * @private\r\n   */\r\n  applyRanges(position) {\r\n    const rangedPosition = {\r\n      longitude: position.longitude,\r\n      latitude : position.latitude,\r\n    };\r\n    const sidesReached = {};\r\n\r\n    let range;\r\n    let offset;\r\n\r\n    if (this.config.longitudeRange) {\r\n      range = utils.clone(this.config.longitudeRange);\r\n      offset = THREE.MathUtils.degToRad(this.psv.prop.hFov) / 2;\r\n\r\n      range[0] = utils.parseAngle(range[0] + offset);\r\n      range[1] = utils.parseAngle(range[1] - offset);\r\n\r\n      if (range[0] > range[1]) { // when the range cross longitude 0\r\n        if (position.longitude > range[1] && position.longitude < range[0]) {\r\n          if (position.longitude > (range[0] / 2 + range[1] / 2)) { // detect which side we are closer too\r\n            rangedPosition.longitude = range[0];\r\n            sidesReached.left = true;\r\n          }\r\n          else {\r\n            rangedPosition.longitude = range[1];\r\n            sidesReached.right = true;\r\n          }\r\n        }\r\n      }\r\n      else if (position.longitude < range[0]) {\r\n        rangedPosition.longitude = range[0];\r\n        sidesReached.left = true;\r\n      }\r\n      else if (position.longitude > range[1]) {\r\n        rangedPosition.longitude = range[1];\r\n        sidesReached.right = true;\r\n      }\r\n    }\r\n\r\n    if (this.config.latitudeRange) {\r\n      range = utils.clone(this.config.latitudeRange);\r\n      offset = THREE.MathUtils.degToRad(this.psv.prop.vFov) / 2;\r\n\r\n      range[0] = utils.parseAngle(Math.min(range[0] + offset, range[1]), true);\r\n      range[1] = utils.parseAngle(Math.max(range[1] - offset, range[0]), true);\r\n\r\n      if (position.latitude < range[0]) {\r\n        rangedPosition.latitude = range[0];\r\n        sidesReached.bottom = true;\r\n      }\r\n      else if (position.latitude > range[1]) {\r\n        rangedPosition.latitude = range[1];\r\n        sidesReached.top = true;\r\n      }\r\n    }\r\n\r\n    return { rangedPosition, sidesReached };\r\n  }\r\n\r\n  /**\r\n   * @summary Reverses autorotate direction with smooth transition\r\n   * @private\r\n   */\r\n  __reverseAutorotate(left, right) {\r\n    // reverse already ongoing\r\n    if (left && this.psv.config.autorotateSpeed > 0 || right && this.psv.config.autorotateSpeed < 0) {\r\n      return;\r\n    }\r\n\r\n    this.psv.config.autorotateSpeed = -this.psv.config.autorotateSpeed;\r\n    this.psv.startAutorotate(true);\r\n  }\r\n\r\n}\r\n"],"names":["EPS","VisibleRangePlugin","psv","options","config","latitudeRange","longitudeRange","usePanoData","init","on","CONSTANTS","EVENTS","PANORAMA_LOADED","POSITION_UPDATED","ZOOM_UPDATED","CHANGE_EVENTS","GET_ANIMATE_POSITION","GET_ROTATE_POSITION","setLatitudeRange","setLongitudeRange","destroy","off","handleEvent","e","sidesReached","rangedPosition","currentPosition","type","value","applyRanges","args","left","right","isAutorotateEnabled","__reverseAutorotate","Math","abs","longitude","latitude","dynamics","position","setValue","setRangesFromPanoData","getPosition","rotate","range","length","utils","logWarn","map","angle","parseAngle","prop","ready","getPanoLatitudeRange","getPanoLongitudeRange","p","panoData","croppedHeight","fullHeight","croppedY","y","PI","croppedWidth","fullWidth","croppedX","x","offset","clone","THREE","MathUtils","degToRad","hFov","vFov","min","max","bottom","top","autorotateSpeed","startAutorotate","AbstractPlugin","id"],"mappings":"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"}