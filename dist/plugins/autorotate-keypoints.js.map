{"version":3,"file":"autorotate-keypoints.js","sources":["../../src/plugins/autorotate-keypoints/index.js"],"sourcesContent":["import * as THREE from 'three';\r\nimport { AbstractPlugin, CONSTANTS, PSVError, utils } from '../..';\r\n\r\n/**\r\n * @typedef {Object} PSV.plugins.AutorotateKeypointsPlugin.KeypointObject\r\n * @property {PSV.ExtendedPosition} [position]\r\n * @property {string} [markerId] - use the position and tooltip of a marker\r\n * @property {number} [pause=0] - pause the animation when reaching this point, will display the tooltip if available\r\n * @property {string|{content: string, position: string}} [tooltip]\r\n */\r\n\r\n/**\r\n * @typedef {PSV.ExtendedPosition|string|PSV.plugins.AutorotateKeypointsPlugin.KeypointObject} PSV.plugins.AutorotateKeypointsPlugin.Keypoint\r\n * @summary Definition of keypoints for automatic rotation, can be a position object, a marker id or an keypoint object\r\n */\r\n\r\n/**\r\n * @typedef {Object} PSV.plugins.AutorotateKeypointsPlugin.Options\r\n * @property {boolean} [startFromClosest=true] - start from the closest keypoint instead of the first keypoint\r\n * @property {PSV.plugins.AutorotateKeypointsPlugin.Keypoint[]} keypoints\r\n */\r\n\r\n\r\nconst NUM_STEPS = 16;\r\n\r\nfunction serializePt(position) {\r\n  return [position.longitude, position.latitude];\r\n}\r\n\r\n\r\n/**\r\n * @summary Replaces the standard autorotate animation by a smooth transition between multiple points\r\n * @extends PSV.plugins.AbstractPlugin\r\n * @memberof PSV.plugins\r\n */\r\nexport class AutorotateKeypointsPlugin extends AbstractPlugin {\r\n\r\n  static id = 'autorotate-keypoints';\r\n\r\n  /**\r\n   * @param {PSV.Viewer} psv\r\n   * @param {PSV.plugins.AutorotateKeypointsPlugin.Options} [options]\r\n   */\r\n  constructor(psv, options) {\r\n    super(psv);\r\n\r\n    /**\r\n     * @member {Object}\r\n     * @property {number} idx -  current index in keypoints\r\n     * @property {number[][]} curve - curve between idx and idx + 1\r\n     * @property {number[]} startStep - start point of the current step\r\n     * @property {number[]} endStep - end point of the current step\r\n     * @property {number} startTime - start time of the current step\r\n     * @property {number} stepDuration - expected duration of the step\r\n     * @property {number} remainingPause - time remaining for the pause\r\n     * @property {number} lastTime - previous timestamp in render loop\r\n     * @property {PSV.components.Tooltip} tooltip - currently displayed tooltip\r\n     * @private\r\n     */\r\n    this.state = {};\r\n\r\n    /**\r\n     * @member {PSV.plugins.AutorotateKeypointsPlugin.Options}\r\n     * @private\r\n     */\r\n    this.config = {\r\n      startFromClosest: true,\r\n      ...options,\r\n    };\r\n\r\n    /**\r\n     * @type {PSV.plugins.AutorotateKeypointsPlugin.Keypoint[]} keypoints\r\n     */\r\n    this.keypoints = null;\r\n\r\n    /**\r\n     * @type {PSV.plugins.MarkersPlugin}\r\n     * @private\r\n     */\r\n    this.markers = null;\r\n  }\r\n\r\n  /**\r\n   * @package\r\n   */\r\n  init() {\r\n    super.init();\r\n\r\n    this.markers = this.psv.getPlugin('markers');\r\n\r\n    if (this.config.keypoints) {\r\n      this.setKeypoints(this.config.keypoints);\r\n      delete this.config.keypoints;\r\n    }\r\n\r\n    this.psv.on(CONSTANTS.EVENTS.AUTOROTATE, this);\r\n    this.psv.on(CONSTANTS.EVENTS.BEFORE_RENDER, this);\r\n  }\r\n\r\n  /**\r\n   * @package\r\n   */\r\n  destroy() {\r\n    this.psv.off(CONSTANTS.EVENTS.AUTOROTATE, this);\r\n    this.psv.off(CONSTANTS.EVENTS.BEFORE_RENDER, this);\r\n\r\n    delete this.markers;\r\n    delete this.keypoints;\r\n\r\n    super.destroy();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleEvent(e) {\r\n    if (e.type === CONSTANTS.EVENTS.AUTOROTATE) {\r\n      this.__configure();\r\n    }\r\n    else if (e.type === CONSTANTS.EVENTS.BEFORE_RENDER) {\r\n      this.__beforeRender(e.args[0]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @summary Changes the keypoints\r\n   * @param {PSV.plugins.AutorotateKeypointsPlugin.Keypoint[]} keypoints\r\n   */\r\n  setKeypoints(keypoints) {\r\n    if (keypoints?.length < 2) {\r\n      throw new PSVError('At least two points are required');\r\n    }\r\n\r\n    this.keypoints = utils.clone(keypoints);\r\n\r\n    if (this.keypoints) {\r\n      this.keypoints.forEach((pt, i) => {\r\n        if (typeof pt === 'string') {\r\n          pt = { markerId: pt };\r\n        }\r\n        else if (utils.isExtendedPosition(pt)) {\r\n          pt = { position: pt };\r\n        }\r\n        if (pt.markerId) {\r\n          if (!this.markers) {\r\n            throw new PSVError(`Keypoint #${i} references a marker but the markers plugin is not loaded`);\r\n          }\r\n          const marker = this.markers.getMarker(pt.markerId);\r\n          pt.position = serializePt(marker.props.position);\r\n        }\r\n        else if (pt.position) {\r\n          pt.position = serializePt(this.psv.dataHelper.cleanPosition(pt.position));\r\n        }\r\n        else {\r\n          throw new PSVError(`Keypoint #${i} is missing marker or position`);\r\n        }\r\n\r\n        if (typeof pt.tooltip === 'string') {\r\n          pt.tooltip = { content: pt.tooltip };\r\n        }\r\n\r\n        this.keypoints[i] = pt;\r\n      });\r\n    }\r\n\r\n    this.__configure();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  __configure() {\r\n    if (!this.psv.isAutorotateEnabled() || !this.keypoints) {\r\n      this.__hideTooltip();\r\n      this.state = {};\r\n      return;\r\n    }\r\n\r\n    // cancel core rotation\r\n    this.psv.dynamics.position.stop();\r\n\r\n    this.state = {\r\n      idx           : -1,\r\n      curve         : [],\r\n      startStep     : null,\r\n      endStep       : null,\r\n      startTime     : null,\r\n      stepDuration  : null,\r\n      remainingPause: null,\r\n      lastTime      : null,\r\n      tooltip       : null,\r\n    };\r\n\r\n    if (this.config.startFromClosest) {\r\n      const currentPosition = serializePt(this.psv.getPosition());\r\n      const index = this.__findMinIndex(this.keypoints, (keypoint) => {\r\n        return utils.greatArcDistance(keypoint.position, currentPosition);\r\n      });\r\n\r\n      this.keypoints.push(...this.keypoints.splice(0, index));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  __beforeRender(timestamp) {\r\n    if (this.psv.isAutorotateEnabled()) {\r\n      // initialisation\r\n      if (!this.state.startTime) {\r\n        this.state.endStep = serializePt(this.psv.getPosition());\r\n        this.__nextStep();\r\n\r\n        this.state.startTime = timestamp;\r\n        this.state.lastTime = timestamp;\r\n      }\r\n\r\n      this.__nextFrame(timestamp);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  __incrementIdx() {\r\n    this.state.idx++;\r\n    if (this.state.idx === this.keypoints.length) {\r\n      this.state.idx = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  __showTooltip() {\r\n    const keypoint = this.keypoints[this.state.idx];\r\n\r\n    if (keypoint.tooltip) {\r\n      const position = this.psv.dataHelper.vector3ToViewerCoords(this.psv.prop.direction);\r\n\r\n      this.state.tooltip = this.psv.tooltip.create({\r\n        content : keypoint.tooltip.content,\r\n        position: keypoint.tooltip.position,\r\n        top     : position.y,\r\n        left    : position.x,\r\n      });\r\n    }\r\n    else if (keypoint.markerId) {\r\n      const marker = this.markers.getMarker(keypoint.markerId);\r\n      marker.showTooltip();\r\n      this.state.tooltip = marker.tooltip;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  __hideTooltip() {\r\n    if (this.state.tooltip) {\r\n      const keypoint = this.keypoints[this.state.idx];\r\n\r\n      if (keypoint.tooltip) {\r\n        this.state.tooltip.hide();\r\n      }\r\n      else if (keypoint.markerId) {\r\n        const marker = this.markers.getMarker(keypoint.markerId);\r\n        marker.hideTooltip();\r\n      }\r\n\r\n      this.state.tooltip = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  __nextPoint() {\r\n    // get the 4 points necessary to compute the current movement\r\n    // the two points of the current segments and one point before and after\r\n    const workPoints = [];\r\n    if (this.state.idx === -1) {\r\n      const currentPosition = serializePt(this.psv.getPosition());\r\n      workPoints.push(\r\n        currentPosition,\r\n        currentPosition,\r\n        this.keypoints[0].position,\r\n        this.keypoints[1].position\r\n      );\r\n    }\r\n    else {\r\n      for (let i = -1; i < 3; i++) {\r\n        const keypoint = this.state.idx + i < 0\r\n          ? this.keypoints[this.keypoints.length - 1]\r\n          : this.keypoints[(this.state.idx + i) % this.keypoints.length];\r\n        workPoints.push(keypoint.position);\r\n      }\r\n    }\r\n\r\n    // apply offsets to avoid crossing the origin\r\n    const workVectors = [new THREE.Vector2(workPoints[0][0], workPoints[0][1])];\r\n\r\n    let k = 0;\r\n    for (let i = 1; i <= 3; i++) {\r\n      const d = workPoints[i - 1][0] - workPoints[i][0];\r\n      if (d > Math.PI) { // crossed the origin left to right\r\n        k += 1;\r\n      }\r\n      else if (d < -Math.PI) { // crossed the origin right to left\r\n        k -= 1;\r\n      }\r\n      if (k !== 0 && i === 1) {\r\n        // do not modify first point, apply the reverse offset the the previous point instead\r\n        workVectors[0].x -= k * 2 * Math.PI;\r\n        k = 0;\r\n      }\r\n      workVectors.push(new THREE.Vector2(workPoints[i][0] + k * 2 * Math.PI, workPoints[i][1]));\r\n    }\r\n\r\n    const curve = new THREE.SplineCurve(workVectors)\r\n      .getPoints(NUM_STEPS * 3)\r\n      .map(p => ([p.x, p.y]));\r\n\r\n    // debugCurve(this.markers, curve, NUM_STEPS);\r\n\r\n    // only keep the curve for the current movement\r\n    this.state.curve = curve.slice(NUM_STEPS + 1, NUM_STEPS * 2 + 1);\r\n\r\n    if (this.state.idx !== -1) {\r\n      this.state.remainingPause = this.keypoints[this.state.idx].pause;\r\n\r\n      if (this.state.remainingPause) {\r\n        this.__showTooltip();\r\n      }\r\n      else {\r\n        this.__incrementIdx();\r\n      }\r\n    }\r\n    else {\r\n      this.__incrementIdx();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  __nextStep() {\r\n    if (this.state.curve.length === 0) {\r\n      this.__nextPoint();\r\n\r\n      // reset transformation made to the previous point\r\n      this.state.endStep[0] = utils.parseAngle(this.state.endStep[0]);\r\n    }\r\n\r\n    // target next point\r\n    this.state.startStep = this.state.endStep;\r\n    this.state.endStep = this.state.curve.shift();\r\n\r\n    // compute duration from distance and speed\r\n    const distance = utils.greatArcDistance(this.state.startStep, this.state.endStep);\r\n    this.state.stepDuration = distance * 1000 / Math.abs(this.psv.config.autorotateSpeed);\r\n\r\n    if (distance === 0) { // edge case\r\n      this.__nextStep();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  __nextFrame(timestamp) {\r\n    const ellapsed = timestamp - this.state.lastTime;\r\n    this.state.lastTime = timestamp;\r\n\r\n    // currently paused\r\n    if (this.state.remainingPause) {\r\n      this.state.remainingPause = Math.max(0, this.state.remainingPause - ellapsed);\r\n      if (this.state.remainingPause > 0) {\r\n        return;\r\n      }\r\n      else {\r\n        this.__hideTooltip();\r\n        this.__incrementIdx();\r\n        this.state.startTime = timestamp;\r\n      }\r\n    }\r\n\r\n    let progress = (timestamp - this.state.startTime) / this.state.stepDuration;\r\n    if (progress >= 1) {\r\n      this.__nextStep();\r\n      progress = 0;\r\n      this.state.startTime = timestamp;\r\n    }\r\n\r\n    this.psv.rotate({\r\n      longitude: this.state.startStep[0] + (this.state.endStep[0] - this.state.startStep[0]) * progress,\r\n      latitude : this.state.startStep[1] + (this.state.endStep[1] - this.state.startStep[1]) * progress,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  __findMinIndex(array, mapper) {\r\n    let idx = 0;\r\n    let current = Number.MAX_VALUE;\r\n\r\n    array.forEach((item, i) => {\r\n      const value = mapper ? mapper(item) : item;\r\n      if (value < current) {\r\n        current = value;\r\n        idx = i;\r\n      }\r\n    });\r\n\r\n    return idx;\r\n  }\r\n\r\n}\r\n"],"names":["NUM_STEPS","serializePt","position","longitude","latitude","AutorotateKeypointsPlugin","psv","options","state","config","startFromClosest","keypoints","markers","init","getPlugin","setKeypoints","on","CONSTANTS","EVENTS","AUTOROTATE","BEFORE_RENDER","destroy","off","handleEvent","e","type","__configure","__beforeRender","args","length","PSVError","utils","clone","forEach","pt","i","markerId","isExtendedPosition","marker","getMarker","props","dataHelper","cleanPosition","tooltip","content","isAutorotateEnabled","__hideTooltip","dynamics","stop","idx","curve","startStep","endStep","startTime","stepDuration","remainingPause","lastTime","currentPosition","getPosition","index","__findMinIndex","keypoint","greatArcDistance","push","splice","timestamp","__nextStep","__nextFrame","__incrementIdx","__showTooltip","vector3ToViewerCoords","prop","direction","create","top","y","left","x","showTooltip","hide","hideTooltip","__nextPoint","workPoints","workVectors","THREE","Vector2","k","d","Math","PI","SplineCurve","getPoints","map","p","slice","pause","parseAngle","shift","distance","abs","autorotateSpeed","ellapsed","max","progress","rotate","array","mapper","current","Number","MAX_VALUE","item","value","AbstractPlugin","id"],"mappings":"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"}