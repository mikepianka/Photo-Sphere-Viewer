{"version":3,"file":"resolution.js","sources":["../../src/plugins/resolution/constants.js","../../src/plugins/resolution/index.js"],"sourcesContent":["/**\r\n * @summary Available events\r\n * @enum {string}\r\n * @memberof PSV.plugins.ResolutionPlugin\r\n * @constant\r\n */\r\nexport const EVENTS = {\r\n  /**\r\n   * @event resolution-changed\r\n   * @memberof PSV.plugins.ResolutionPlugin\r\n   * @summary Triggered when the resolution is changed\r\n   * @param {string} resolutionId\r\n   */\r\n  RESOLUTION_CHANGED: 'resolution-changed',\r\n};\r\n","import { AbstractPlugin, CONSTANTS, DEFAULTS, PSVError, utils } from '../..';\r\nimport { EVENTS } from './constants';\r\n\r\n\r\n/**\r\n * @typedef {Object} PSV.plugins.ResolutionPlugin.Resolution\r\n * @property {string} id\r\n * @property {string} label\r\n * @property {*} panorama\r\n */\r\n\r\n/**\r\n * @typedef {Object} PSV.plugins.ResolutionPlugin.Options\r\n * @property {PSV.plugins.ResolutionPlugin.Resolution[]} resolutions - list of available resolutions\r\n * @property {boolean} [showBadge=true] - show the resolution id as a badge on the settings button\r\n */\r\n\r\n\r\nDEFAULTS.lang.resolution = 'Quality';\r\n\r\n\r\nexport { EVENTS } from './constants';\r\n\r\n\r\n/**\r\n * @summary Adds a setting to choose between multiple resolutions of the panorama.\r\n * @extends PSV.plugins.AbstractPlugin\r\n * @memberof PSV.plugins\r\n */\r\nexport class ResolutionPlugin extends AbstractPlugin {\r\n\r\n  static id = 'resolution';\r\n\r\n  static EVENTS = EVENTS;\r\n\r\n  /**\r\n   * @param {PSV.Viewer} psv\r\n   * @param {PSV.plugins.ResolutionPlugin.Options} options\r\n   */\r\n  constructor(psv, options) {\r\n    super(psv);\r\n\r\n    /**\r\n     * @type {PSV.plugins.SettingsPlugin}\r\n     * @readonly\r\n     * @private\r\n     */\r\n    this.settings = null;\r\n\r\n    /**\r\n     * @summary Available resolutions\r\n     * @member {PSV.plugins.ResolutionPlugin.Resolution[]}\r\n     */\r\n    this.resolutions = [];\r\n\r\n    /**\r\n     * @summary Available resolutions\r\n     * @member {Object.<string, PSV.plugins.ResolutionPlugin.Resolution>}\r\n     * @private\r\n     */\r\n    this.resolutionsById = {};\r\n\r\n    /**\r\n     * @type {Object}\r\n     * @property {string} resolution - Current resolution\r\n     * @private\r\n     */\r\n    this.prop = {\r\n      resolution: null,\r\n    };\r\n\r\n    /**\r\n     * @type {PSV.plugins.ResolutionPlugin.Options}\r\n     */\r\n    this.config = {\r\n      showBadge: true,\r\n      ...options,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @package\r\n   */\r\n  init() {\r\n    super.init();\r\n\r\n    this.settings = this.psv.getPlugin('settings');\r\n\r\n    if (!this.settings) {\r\n      throw new PSVError('Resolution plugin requires the Settings plugin');\r\n    }\r\n\r\n    this.settings.addSetting({\r\n      id     : ResolutionPlugin.id,\r\n      type   : 'options',\r\n      label  : this.psv.config.lang.resolution,\r\n      current: () => this.prop.resolution,\r\n      options: () => this.__getSettingsOptions(),\r\n      apply  : resolution => this.setResolution(resolution),\r\n      badge  : !this.config.showBadge ? null : () => this.prop.resolution,\r\n    });\r\n\r\n    this.psv.on(CONSTANTS.EVENTS.PANORAMA_LOADED, this);\r\n\r\n    if (this.config.resolutions) {\r\n      this.setResolutions(this.config.resolutions);\r\n      delete this.config.resolutions;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @package\r\n   */\r\n  destroy() {\r\n    this.psv.off(CONSTANTS.EVENTS.PANORAMA_LOADED, this);\r\n\r\n    this.settings.removeSetting(ResolutionPlugin.id);\r\n\r\n    super.destroy();\r\n  }\r\n\r\n  /**\r\n   * @summary Handles events\r\n   * @param {Event} e\r\n   * @private\r\n   */\r\n  handleEvent(e) {\r\n    if (e.type === CONSTANTS.EVENTS.PANORAMA_LOADED) {\r\n      this.__refreshResolution();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @summary Changes the available resolutions\r\n   * @param {PSV.plugins.ResolutionPlugin.Resolution[]} resolutions\r\n   */\r\n  setResolutions(resolutions) {\r\n    this.resolutions = resolutions;\r\n    this.resolutionsById = {};\r\n\r\n    resolutions.forEach((resolution) => {\r\n      if (!resolution.id) {\r\n        throw new PSVError('Missing resolution id');\r\n      }\r\n      this.resolutionsById[resolution.id] = resolution;\r\n    });\r\n\r\n    this.__refreshResolution();\r\n  }\r\n\r\n  /**\r\n   * @summary Changes the current resolution\r\n   * @param {string} id\r\n   */\r\n  setResolution(id) {\r\n    if (!this.resolutionsById[id]) {\r\n      throw new PSVError(`Resolution ${id} unknown`);\r\n    }\r\n\r\n    return this.psv.setPanorama(this.resolutionsById[id].panorama, { transition: false, showLoader: false });\r\n  }\r\n\r\n  /**\r\n   * @summary Returns the current resolution\r\n   * @return {string}\r\n   */\r\n  getResolution() {\r\n    return this.prop.resolution;\r\n  }\r\n\r\n  /**\r\n   * @summary Updates current resolution on panorama load\r\n   * @private\r\n   */\r\n  __refreshResolution() {\r\n    const resolution = this.resolutions.find(r => utils.deepEqual(this.psv.config.panorama, r.panorama));\r\n    if (this.prop.resolution !== resolution?.id) {\r\n      this.prop.resolution = resolution?.id;\r\n      this.settings?.updateBadge();\r\n      this.trigger(EVENTS.RESOLUTION_CHANGED, this.prop.resolution);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @summary Returns options for Settings plugin\r\n   * @return {PSV.plugins.SettingsPlugin.Option[]}\r\n   * @private\r\n   */\r\n  __getSettingsOptions() {\r\n    return this.resolutions\r\n      .map(resolution => ({\r\n        id   : resolution.id,\r\n        label: resolution.label,\r\n      }));\r\n  }\r\n\r\n}\r\n"],"names":["EVENTS","RESOLUTION_CHANGED","DEFAULTS","lang","resolution","ResolutionPlugin","psv","options","settings","resolutions","resolutionsById","prop","config","showBadge","init","getPlugin","PSVError","addSetting","id","type","label","current","__getSettingsOptions","apply","setResolution","badge","on","CONSTANTS","PANORAMA_LOADED","setResolutions","destroy","off","removeSetting","handleEvent","e","__refreshResolution","forEach","setPanorama","panorama","transition","showLoader","getResolution","find","r","utils","deepEqual","updateBadge","trigger","map","AbstractPlugin"],"mappings":"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"}