{"version":3,"file":"settings.js","sources":["../../src/plugins/settings/constants.js","../../src/plugins/settings/SettingsButton.js","../../src/plugins/settings/index.js"],"sourcesContent":["import check from './check.svg';\r\nimport chevron from './chevron.svg';\r\nimport switchOff from './switch-off.svg';\r\nimport switchOn from './switch-on.svg';\r\n\r\n/**\r\n * @summary Available events\r\n * @enum {string}\r\n * @memberof PSV.plugins.ResolutionPlugin\r\n * @constant\r\n */\r\nexport const EVENTS = {\r\n  /**\r\n   * @event setting-changed\r\n   * @memberof PSV.plugins.SettingsPlugin\r\n   * @summary Triggered when a setting is changed\r\n   * @param {string} settingId\r\n   * @param {any} value\r\n   */\r\n  SETTING_CHANGED: 'setting-changed',\r\n};\r\n\r\n\r\n/**\r\n * @summary Panel identifier for settings content\r\n * @type {string}\r\n * @constant\r\n * @private\r\n */\r\nexport const ID_PANEL = 'settings';\r\n\r\n/**\r\n * @summary Property name added to settings items\r\n * @type {string}\r\n * @constant\r\n * @private\r\n */\r\nexport const SETTING_DATA = 'settingId';\r\n\r\n/**\r\n * @summary Setting item template, by type\r\n * @constant\r\n * @private\r\n */\r\nexport const SETTINGS_TEMPLATE_ = {\r\n  options: (setting, optionsCurrent) => `\r\n      <span class=\"psv-settings-item-label\">${setting.label}</span>\r\n      <span class=\"psv-settings-item-value\">${optionsCurrent(setting)}</span>\r\n      <span class=\"psv-settings-item-icon\">${chevron}</span>\r\n    `,\r\n  toggle : setting => `\r\n      <span class=\"psv-settings-item-label\">${setting.label}</span>\r\n      <span class=\"psv-settings-item-value\">${setting.active() ? switchOn : switchOff}</span>\r\n    `,\r\n};\r\n\r\n/**\r\n * @summary Settings list template\r\n * @param {PSV.plugins.SettingsPlugin.Setting[]} settings\r\n * @param {string} dataKey\r\n * @param {function} optionsCurrent\r\n * @returns {string}\r\n * @constant\r\n * @private\r\n */\r\nexport const SETTINGS_TEMPLATE = (settings, dataKey, optionsCurrent) => `\r\n<div class=\"psv-panel-menu psv-settings-menu\">\r\n  <ul class=\"psv-panel-menu-list\">\r\n    ${settings.map(s => `\r\n      <li class=\"psv-panel-menu-item\" data-${dataKey}=\"${s.id}\">\r\n        ${SETTINGS_TEMPLATE_[s.type](s, optionsCurrent)}\r\n      </li>\r\n    `).join('')}\r\n  </ul>\r\n</div>\r\n`;\r\n\r\n/**\r\n * @summary Settings options template\r\n * @param {PSV.plugins.SettingsPlugin.OptionsSetting} setting\r\n * @param {string} dataKey\r\n * @param {function} optionActive\r\n * @returns {string}\r\n * @constant\r\n * @private\r\n */\r\nexport const SETTING_OPTIONS_TEMPLATE = (setting, dataKey, optionActive) => `\r\n<div class=\"psv-panel-menu psv-settings-menu\">\r\n  <ul class=\"psv-panel-menu-list\">\r\n    <li class=\"psv-panel-menu-item psv-settings-item--header\" data-${dataKey}=\"__back\">\r\n      <span class=\"psv-settings-item-icon\">${chevron}</span>\r\n      <span class=\"psv-settings-item-label\">${setting.label}</span>\r\n    </li>\r\n    ${setting.options().map(s => `\r\n      <li class=\"psv-panel-menu-item\" data-${dataKey}=\"${s.id}\">\r\n        <span class=\"psv-settings-item-icon\">${optionActive(s) ? check : ''}</span>\r\n        <span class=\"psv-settings-item-value\">${s.label}</span>\r\n      </li>\r\n    `).join('')}\r\n  </ul>\r\n</div>\r\n`;\r\n","import { AbstractButton, CONSTANTS } from '../..';\r\nimport { ID_PANEL } from './constants';\r\nimport icon from './settings.svg';\r\n\r\n/**\r\n * @summary Navigation bar settings button class\r\n * @extends PSV.buttons.AbstractButton\r\n * @memberof PSV.buttons\r\n */\r\nexport class SettingsButton extends AbstractButton {\r\n\r\n  static id = 'settings';\r\n  static icon = icon;\r\n\r\n  /**\r\n   * @param {PSV.components.Navbar} navbar\r\n   */\r\n  constructor(navbar) {\r\n    super(navbar, 'psv-button--hover-scale psv-settings-button', true);\r\n\r\n    /**\r\n     * @type {PSV.plugins.SettingsPlugin}\r\n     * @private\r\n     * @readonly\r\n     */\r\n    this.plugin = this.psv.getPlugin('settings');\r\n\r\n    /**\r\n     * @member {HTMLElement}\r\n     * @private\r\n     * @readonly\r\n     */\r\n    this.badge = document.createElement('div');\r\n    this.badge.className = 'psv-settings-badge';\r\n    this.badge.style.display = 'none';\r\n    this.container.appendChild(this.badge);\r\n\r\n    if (this.plugin) {\r\n      this.psv.on(CONSTANTS.EVENTS.OPEN_PANEL, this);\r\n      this.psv.on(CONSTANTS.EVENTS.CLOSE_PANEL, this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  destroy() {\r\n    this.psv.off(CONSTANTS.EVENTS.OPEN_PANEL, this);\r\n    this.psv.off(CONSTANTS.EVENTS.CLOSE_PANEL, this);\r\n\r\n    delete this.plugin;\r\n\r\n    super.destroy();\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  isSupported() {\r\n    return !!this.plugin;\r\n  }\r\n\r\n  /**\r\n   * @summary Handles events\r\n   * @param {Event} e\r\n   * @private\r\n   */\r\n  handleEvent(e) {\r\n    /* eslint-disable */\r\n    switch (e.type) {\r\n      // @formatter:off\r\n      case CONSTANTS.EVENTS.OPEN_PANEL:  this.toggleActive(e.args[0] === ID_PANEL); break;\r\n      case CONSTANTS.EVENTS.CLOSE_PANEL: this.toggleActive(false); break;\r\n      // @formatter:on\r\n    }\r\n    /* eslint-enable */\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   * @description Toggles settings\r\n   */\r\n  onClick() {\r\n    this.plugin.toggleSettings();\r\n  }\r\n\r\n  /**\r\n   * @summary Changes the badge value\r\n   * @param {string} value\r\n   */\r\n  setBadge(value) {\r\n    this.badge.innerText = value;\r\n    this.badge.style.display = value ? '' : 'none';\r\n  }\r\n\r\n}\r\n","import { AbstractPlugin, DEFAULTS, PSVError, registerButton, utils } from '../..';\r\nimport {\r\n  EVENTS,\r\n  ID_PANEL,\r\n  SETTING_DATA,\r\n  SETTING_OPTIONS_TEMPLATE,\r\n  SETTINGS_TEMPLATE,\r\n  SETTINGS_TEMPLATE_\r\n} from './constants';\r\nimport { SettingsButton } from './SettingsButton';\r\nimport './style.scss';\r\n\r\n\r\n/**\r\n * @typedef {Object} PSV.plugins.SettingsPlugin.Setting\r\n * @summary Description of a setting\r\n * @property {string} id - identifier of the setting\r\n * @property {string} label - label of the setting\r\n * @property {'options' | 'toggle'} type - type of the setting\r\n * @property {function} [badge] - function which returns the value of the button badge\r\n */\r\n\r\n/**\r\n * @typedef {PSV.plugins.SettingsPlugin.Setting} PSV.plugins.SettingsPlugin.OptionsSetting\r\n * @summary Description of a 'options' setting\r\n * @property {'options'} type - type of the setting\r\n * @property {function} current - function which returns the current option id\r\n * @property {function} options - function which the possible options as an array of {@link PSV.plugins.SettingsPlugin.Option}\r\n * @property {function} apply - function called with the id of the selected option\r\n */\r\n\r\n/**\r\n * @typedef {PSV.plugins.SettingsPlugin.Setting} PSV.plugins.SettingsPlugin.ToggleSetting\r\n * @summary Description of a 'toggle' setting\r\n * @property {'toggle'} type - type of the setting\r\n * @property {function} active - function which return whereas the setting is active or not\r\n * @property {function} toggle - function called when the setting is toggled\r\n */\r\n\r\n/**\r\n * @typedef {Object} PSV.plugins.SettingsPlugin.Option\r\n * @summary Option of an 'option' setting\r\n * @property {string} id - identifier of the option\r\n * @property {string} label - label of the option\r\n */\r\n\r\n\r\n// add settings button\r\nDEFAULTS.lang[SettingsButton.id] = 'Settings';\r\nregisterButton(SettingsButton, 'fullscreen:left');\r\n\r\n\r\nexport { EVENTS } from './constants';\r\n\r\n\r\n/**\r\n * @summary Adds a button to access various settings.\r\n * @extends PSV.plugins.AbstractPlugin\r\n * @memberof PSV.plugins\r\n */\r\nexport class SettingsPlugin extends AbstractPlugin {\r\n\r\n  static id = 'settings';\r\n\r\n  static EVENTS = EVENTS;\r\n\r\n  /**\r\n   * @param {PSV.Viewer} psv\r\n   */\r\n  constructor(psv) {\r\n    super(psv);\r\n\r\n    /**\r\n     * @type {PSV.plugins.SettingsPlugin.Setting[]}\r\n     * @private\r\n     */\r\n    this.settings = [];\r\n  }\r\n\r\n  /**\r\n   * @package\r\n   */\r\n  init() {\r\n    super.init();\r\n\r\n    // buttons are initialized just after plugins\r\n    setTimeout(() => this.updateBadge());\r\n  }\r\n\r\n  /**\r\n   * @package\r\n   */\r\n  destroy() {\r\n    this.settings.length = 0;\r\n\r\n    super.destroy();\r\n  }\r\n\r\n  /**\r\n   * @summary Registers a new setting\r\n   * @param {PSV.plugins.SettingsPlugin.Setting} setting\r\n   */\r\n  addSetting(setting) {\r\n    if (!setting.id) {\r\n      throw new PSVError('Missing setting id');\r\n    }\r\n    if (!setting.type) {\r\n      throw new PSVError('Missing setting type');\r\n    }\r\n    if (!SETTINGS_TEMPLATE_[setting.type]) {\r\n      throw new PSVError('Unsupported setting type');\r\n    }\r\n\r\n    if (setting.badge && this.settings.some(s => s.badge)) {\r\n      utils.logWarn('More than one setting with a badge are declared, the result is unpredictable.');\r\n    }\r\n\r\n    this.settings.push(setting);\r\n\r\n    if (this.psv.panel.prop.contentId === ID_PANEL) {\r\n      this.showSettings();\r\n    }\r\n\r\n    this.updateBadge();\r\n  }\r\n\r\n  /**\r\n   * @summary Removes a setting\r\n   * @param {string} id\r\n   */\r\n  removeSetting(id) {\r\n    const idx = this.settings.findIndex(setting => setting.id === id);\r\n    if (idx !== -1) {\r\n      this.settings.splice(idx, 1);\r\n\r\n      if (this.psv.panel.prop.contentId === ID_PANEL) {\r\n        this.showSettings();\r\n      }\r\n\r\n      this.updateBadge();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @summary Toggles the settings panel\r\n   */\r\n  toggleSettings() {\r\n    if (this.psv.panel.prop.contentId === ID_PANEL) {\r\n      this.hideSettings();\r\n    }\r\n    else {\r\n      this.showSettings();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @summary Hides the settings panel\r\n   */\r\n  hideSettings() {\r\n    this.psv.panel.hide(ID_PANEL);\r\n  }\r\n\r\n  /**\r\n   * @summary Shows the settings panel\r\n   */\r\n  showSettings() {\r\n    this.psv.panel.show({\r\n      id          : ID_PANEL,\r\n      content     : SETTINGS_TEMPLATE(\r\n        this.settings,\r\n        utils.dasherize(SETTING_DATA),\r\n        (setting) => { // retrocompatibility with \"current\" returning a label\r\n          const current = setting.current();\r\n          const option = setting.options().find(opt => opt.id === current);\r\n          return option?.label || current;\r\n        }\r\n      ),\r\n      noMargin    : true,\r\n      clickHandler: (e) => {\r\n        const li = e.target ? utils.getClosest(e.target, 'li') : undefined;\r\n        const settingId = li ? li.dataset[SETTING_DATA] : undefined;\r\n        const setting = this.settings.find(s => s.id === settingId);\r\n\r\n        if (setting) {\r\n          switch (setting.type) {\r\n            case 'toggle':\r\n              setting.toggle();\r\n              this.trigger(EVENTS.SETTING_CHANGED, setting.id, setting.active());\r\n              this.showSettings();\r\n              this.updateBadge();\r\n              break;\r\n\r\n            case 'options':\r\n              this.__showOptions(setting);\r\n              break;\r\n\r\n            default:\r\n            // noop\r\n          }\r\n        }\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @summary Shows setting options panel\r\n   * @param {PSV.plugins.SettingsPlugin.OptionsSetting} setting\r\n   * @private\r\n   */\r\n  __showOptions(setting) {\r\n    const current = setting.current();\r\n\r\n    this.psv.panel.show({\r\n      id          : ID_PANEL,\r\n      content     : SETTING_OPTIONS_TEMPLATE(\r\n        setting,\r\n        utils.dasherize(SETTING_DATA),\r\n        (option) => { // retrocompatibility with options having an \"active\" flag\r\n          return 'active' in option ? option.active : option.id === current;\r\n        }\r\n      ),\r\n      noMargin    : true,\r\n      clickHandler: (e) => {\r\n        const li = e.target ? utils.getClosest(e.target, 'li') : undefined;\r\n        const optionId = li ? li.dataset[SETTING_DATA] : undefined;\r\n\r\n        if (optionId === '__back') {\r\n          this.showSettings();\r\n        }\r\n        else {\r\n          setting.apply(optionId);\r\n          this.trigger(EVENTS.SETTING_CHANGED, setting.id, setting.current());\r\n          this.hideSettings();\r\n          this.updateBadge();\r\n        }\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @summary Updates the badge in the button\r\n   */\r\n  updateBadge() {\r\n    const value = this.settings.find(s => s.badge)?.badge();\r\n    this.psv.navbar.getButton(SettingsButton.id, false)?.setBadge(value);\r\n  }\r\n\r\n}\r\n"],"names":["EVENTS","SETTING_CHANGED","ID_PANEL","SETTING_DATA","SETTINGS_TEMPLATE_","options","setting","optionsCurrent","label","chevron","toggle","active","switchOn","switchOff","SETTINGS_TEMPLATE","settings","dataKey","map","s","id","type","join","SETTING_OPTIONS_TEMPLATE","optionActive","check","SettingsButton","navbar","plugin","psv","getPlugin","badge","document","createElement","className","style","display","container","appendChild","on","CONSTANTS","OPEN_PANEL","CLOSE_PANEL","destroy","off","isSupported","handleEvent","e","toggleActive","args","onClick","toggleSettings","setBadge","value","innerText","AbstractButton","icon","DEFAULTS","lang","registerButton","SettingsPlugin","init","setTimeout","updateBadge","length","addSetting","PSVError","some","utils","logWarn","push","panel","prop","contentId","showSettings","removeSetting","idx","findIndex","splice","hideSettings","hide","show","content","dasherize","current","option","find","opt","noMargin","clickHandler","li","target","getClosest","undefined","settingId","dataset","trigger","__showOptions","optionId","apply","getButton","AbstractPlugin"],"mappings":"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"}