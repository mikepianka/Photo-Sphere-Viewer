{"version":3,"file":"cubemap.js","sources":["../../src/adapters/cubemap/index.js"],"sourcesContent":["import * as THREE from 'three';\r\nimport { AbstractAdapter, CONSTANTS, PSVError, SYSTEM, utils } from '../..';\r\n\r\n\r\n/**\r\n * @typedef {Object} PSV.adapters.CubemapAdapter.Cubemap\r\n * @summary Object defining a cubemap\r\n * @property {string} left\r\n * @property {string} front\r\n * @property {string} right\r\n * @property {string} back\r\n * @property {string} top\r\n * @property {string} bottom\r\n */\r\n\r\n/**\r\n * @typedef {Object} PSV.adapters.CubemapAdapter.Options\r\n * @property {boolean} [flipTopBottom=false] - set to true if the top and bottom faces are not correctly oriented\r\n */\r\n\r\n\r\n// PSV faces order is left, front, right, back, top, bottom\r\n// 3JS faces order is left, right, top, bottom, back, front\r\nexport const CUBE_ARRAY = [0, 2, 4, 5, 3, 1];\r\nexport const CUBE_HASHMAP = ['left', 'right', 'top', 'bottom', 'back', 'front'];\r\n\r\n\r\n/**\r\n * @summary Adapter for cubemaps\r\n * @memberof PSV.adapters\r\n * @extends PSV.adapters.AbstractAdapter\r\n */\r\nexport class CubemapAdapter extends AbstractAdapter {\r\n\r\n  static id = 'cubemap';\r\n  static supportsDownload = false;\r\n\r\n  /**\r\n   * @param {PSV.Viewer} psv\r\n   * @param {PSV.adapters.CubemapAdapter.Options} options\r\n   */\r\n  constructor(psv, options) {\r\n    super(psv);\r\n\r\n    /**\r\n     * @member {PSV.adapters.CubemapAdapter.Options}\r\n     * @private\r\n     */\r\n    this.config = {\r\n      flipTopBottom: false,\r\n      ...options,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  supportsTransition() {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  supportsPreload() {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   * @param {string[] | PSV.adapters.CubemapAdapter.Cubemap} panorama\r\n   * @returns {Promise.<PSV.TextureData>}\r\n   */\r\n  loadTexture(panorama) {\r\n    const cleanPanorama = [];\r\n\r\n    if (Array.isArray(panorama)) {\r\n      if (panorama.length !== 6) {\r\n        return Promise.reject(new PSVError('Must provide exactly 6 image paths when using cubemap.'));\r\n      }\r\n\r\n      // reorder images\r\n      for (let i = 0; i < 6; i++) {\r\n        cleanPanorama[i] = panorama[CUBE_ARRAY[i]];\r\n      }\r\n    }\r\n    else if (typeof panorama === 'object') {\r\n      if (!CUBE_HASHMAP.every(side => !!panorama[side])) {\r\n        return Promise.reject(new PSVError('Must provide exactly left, front, right, back, top, bottom when using cubemap.'));\r\n      }\r\n\r\n      // transform into array\r\n      CUBE_HASHMAP.forEach((side, i) => {\r\n        cleanPanorama[i] = panorama[side];\r\n      });\r\n    }\r\n    else {\r\n      return Promise.reject(new PSVError('Invalid cubemap panorama, are you using the right adapter?'));\r\n    }\r\n\r\n    if (this.psv.config.fisheye) {\r\n      utils.logWarn('fisheye effect with cubemap texture can generate distorsion');\r\n    }\r\n\r\n    const promises = [];\r\n    const progress = [0, 0, 0, 0, 0, 0];\r\n\r\n    for (let i = 0; i < 6; i++) {\r\n      promises.push(\r\n        this.psv.textureLoader.loadImage(cleanPanorama[i], (p) => {\r\n          progress[i] = p;\r\n          this.psv.loader.setProgress(utils.sum(progress) / 6);\r\n        })\r\n          .then(img => this.__createCubemapTexture(img))\r\n      );\r\n    }\r\n\r\n    return Promise.all(promises)\r\n      .then(texture => ({ panorama, texture }));\r\n  }\r\n\r\n  /**\r\n   * @summary Creates the final texture from image\r\n   * @param {HTMLImageElement} img\r\n   * @returns {external:THREE.Texture}\r\n   * @private\r\n   */\r\n  __createCubemapTexture(img) {\r\n    if (img.width !== img.height) {\r\n      utils.logWarn('Invalid base image, the width equal the height');\r\n    }\r\n\r\n    // resize image\r\n    if (img.width > SYSTEM.maxTextureWidth) {\r\n      const ratio = SYSTEM.getMaxCanvasWidth() / img.width;\r\n\r\n      const buffer = document.createElement('canvas');\r\n      buffer.width = img.width * ratio;\r\n      buffer.height = img.height * ratio;\r\n\r\n      const ctx = buffer.getContext('2d');\r\n      ctx.drawImage(img, 0, 0, buffer.width, buffer.height);\r\n\r\n      return utils.createTexture(buffer);\r\n    }\r\n\r\n    return utils.createTexture(img);\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  createMesh(scale = 1) {\r\n    const cubeSize = CONSTANTS.SPHERE_RADIUS * 2 * scale;\r\n    const geometry = new THREE.BoxGeometry(cubeSize, cubeSize, cubeSize)\r\n      .scale(1, 1, -1);\r\n\r\n    const materials = [];\r\n    for (let i = 0; i < 6; i++) {\r\n      materials.push(new THREE.MeshBasicMaterial());\r\n    }\r\n\r\n    return new THREE.Mesh(geometry, materials);\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  setTexture(mesh, textureData) {\r\n    const { texture } = textureData;\r\n\r\n    for (let i = 0; i < 6; i++) {\r\n      if (this.config.flipTopBottom && (i === 2 || i === 3)) {\r\n        texture[i].center = new THREE.Vector2(0.5, 0.5);\r\n        texture[i].rotation = Math.PI;\r\n      }\r\n\r\n      mesh.material[i].map?.dispose();\r\n      mesh.material[i].map = texture[i];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  setTextureOpacity(mesh, opacity) {\r\n    for (let i = 0; i < 6; i++) {\r\n      mesh.material[i].opacity = opacity;\r\n      mesh.material[i].transparent = opacity < 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  disposeTexture(textureData) {\r\n    textureData.texture?.forEach(texture => texture.dispose());\r\n  }\r\n\r\n}\r\n"],"names":["CUBE_ARRAY","CUBE_HASHMAP","CubemapAdapter","psv","options","config","flipTopBottom","supportsTransition","supportsPreload","loadTexture","panorama","cleanPanorama","Array","isArray","length","Promise","reject","PSVError","i","every","side","forEach","fisheye","utils","logWarn","promises","progress","push","textureLoader","loadImage","p","loader","setProgress","sum","then","img","__createCubemapTexture","all","texture","width","height","SYSTEM","maxTextureWidth","ratio","getMaxCanvasWidth","buffer","document","createElement","ctx","getContext","drawImage","createTexture","createMesh","scale","cubeSize","CONSTANTS","SPHERE_RADIUS","geometry","THREE","BoxGeometry","materials","MeshBasicMaterial","Mesh","setTexture","mesh","textureData","center","Vector2","rotation","Math","PI","material","map","dispose","setTextureOpacity","opacity","transparent","disposeTexture","AbstractAdapter","id","supportsDownload"],"mappings":"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"}