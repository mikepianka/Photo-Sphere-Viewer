{"version":3,"file":"equirectangular-tiles.js","sources":["../../src/adapters/shared/Task.js","../../src/adapters/shared/Queue.js","../../src/adapters/shared/tiles-utils.js","../../src/adapters/equirectangular-tiles/index.js"],"sourcesContent":["/**\r\n * @summary Loading task\r\n * @memberOf PSV.adapters\r\n * @private\r\n */\r\nexport class Task {\r\n\r\n  static STATUS = {\r\n    DISABLED : -1,\r\n    PENDING  : 0,\r\n    RUNNING  : 1,\r\n    CANCELLED: 2,\r\n    DONE     : 3,\r\n    ERROR    : 4,\r\n  };\r\n\r\n  /**\r\n   * @param {string} id\r\n   * @param {number} priority\r\n   * @param {function(Task): Promise} fn\r\n   */\r\n  constructor(id, priority, fn) {\r\n    this.id = id;\r\n    this.priority = priority;\r\n    this.fn = fn;\r\n    this.status = Task.STATUS.PENDING;\r\n  }\r\n\r\n  start() {\r\n    this.status = Task.STATUS.RUNNING;\r\n    return this.fn(this)\r\n      .then(() => {\r\n        this.status = Task.STATUS.DONE;\r\n      }, () => {\r\n        this.status = Task.STATUS.ERROR;\r\n      });\r\n  }\r\n\r\n  cancel() {\r\n    this.status = Task.STATUS.CANCELLED;\r\n  }\r\n\r\n  isCancelled() {\r\n    return this.status === Task.STATUS.CANCELLED;\r\n  }\r\n\r\n}\r\n","import { Task } from './Task';\r\n\r\n/**\r\n * @summary Loading queue\r\n * @memberOf PSV.adapters\r\n * @private\r\n */\r\nexport class Queue {\r\n\r\n  /**\r\n   * @param {int} concurency\r\n   */\r\n  constructor(concurency = 4) {\r\n    this.concurency = concurency;\r\n    this.runningTasks = {};\r\n    this.tasks = {};\r\n  }\r\n\r\n  enqueue(task) {\r\n    this.tasks[task.id] = task;\r\n  }\r\n\r\n  clear() {\r\n    Object.values(this.tasks).forEach(task => task.cancel());\r\n    this.tasks = {};\r\n    this.runningTasks = {};\r\n  }\r\n\r\n  setPriority(taskId, priority) {\r\n    const task = this.tasks[taskId];\r\n    if (task) {\r\n      task.priority = priority;\r\n      if (task.status === Task.STATUS.DISABLED) {\r\n        task.status = Task.STATUS.PENDING;\r\n      }\r\n    }\r\n  }\r\n\r\n  disableAllTasks() {\r\n    Object.values(this.tasks).forEach((task) => {\r\n      task.status = Task.STATUS.DISABLED;\r\n    });\r\n  }\r\n\r\n  start() {\r\n    if (Object.keys(this.runningTasks).length >= this.concurency) {\r\n      return;\r\n    }\r\n\r\n    const nextTask = Object.values(this.tasks)\r\n      .filter(task => task.status === Task.STATUS.PENDING)\r\n      .sort((a, b) => b.priority - a.priority)\r\n      .pop();\r\n\r\n    if (nextTask) {\r\n      this.runningTasks[nextTask.id] = true;\r\n\r\n      nextTask.start()\r\n        .then(() => {\r\n          if (!nextTask.isCancelled()) {\r\n            delete this.tasks[nextTask.id];\r\n            delete this.runningTasks[nextTask.id];\r\n            this.start();\r\n          }\r\n        });\r\n\r\n      this.start(); // start tasks until max concurrency is reached\r\n    }\r\n  }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { SYSTEM, utils } from '../..';\r\n\r\n/**\r\n * @summary Generates an material for errored tiles\r\n * @memberOf PSV.adapters\r\n * @return {external:THREE.MeshBasicMaterial}\r\n * @private\r\n */\r\nexport function buildErrorMaterial(width, height) {\r\n  const canvas = document.createElement('canvas');\r\n  canvas.width = width;\r\n  canvas.height = height;\r\n\r\n  const ctx = canvas.getContext('2d');\r\n\r\n  ctx.fillStyle = '#333';\r\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n  ctx.font = `${canvas.width / 5}px serif`;\r\n  ctx.fillStyle = '#a22';\r\n  ctx.textAlign = 'center';\r\n  ctx.textBaseline = 'middle';\r\n  ctx.fillText('⚠', canvas.width / 2, canvas.height / 2);\r\n\r\n  const texture = new THREE.CanvasTexture(canvas);\r\n  return new THREE.MeshBasicMaterial({ map: texture });\r\n}\r\n\r\n/**\r\n * @summary Create the texture for the base image\r\n * @memberOf PSV.adapters\r\n * @param {HTMLImageElement} img\r\n * @param {boolean} blur\r\n * @param {function} getHeight\r\n * @return {external:THREE.Texture}\r\n * @private\r\n */\r\nexport function createBaseTexture(img, blur, getHeight) {\r\n  if (blur || img.width > SYSTEM.maxTextureWidth) {\r\n    const ratio = Math.min(1, SYSTEM.getMaxCanvasWidth() / img.width);\r\n\r\n    const buffer = document.createElement('canvas');\r\n    buffer.width = img.width * ratio;\r\n    buffer.height = getHeight(img.width);\r\n\r\n    const ctx = buffer.getContext('2d');\r\n    if (blur) {\r\n      ctx.filter = 'blur(1px)';\r\n    }\r\n    ctx.drawImage(img, 0, 0, buffer.width, buffer.height);\r\n\r\n    return utils.createTexture(buffer);\r\n  }\r\n\r\n  return utils.createTexture(img);\r\n}\r\n\r\n/**\r\n * @summary Creates a wireframe geometry, for debug\r\n * @memberOf PSV.adapters\r\n * @param {THREE.BufferGeometry} geometry\r\n * @return {THREE.Object3D}\r\n * @private\r\n */\r\nexport function createWireFrame(geometry) {\r\n  const wireframe = new THREE.WireframeGeometry(geometry);\r\n  const line = new THREE.LineSegments(wireframe);\r\n  line.material.depthTest = false;\r\n  line.material.opacity = 0.25;\r\n  line.material.transparent = true;\r\n  return line;\r\n}\r\n\r\n/**\r\n * @summary Creates a small red sphere, for debug\r\n * @memberOf PSV.adapters\r\n * @return {THREE.Object3D}\r\n * @private\r\n */\r\nexport function createDot(x, y, z) {\r\n  const geom = new THREE.SphereGeometry(0.1);\r\n  const material = new THREE.MeshBasicMaterial({ color: 0xff0000 });\r\n  const mesh = new THREE.Mesh(geom, material);\r\n  mesh.position.set(x, y, z);\r\n  return mesh;\r\n}\r\n","import * as THREE from 'three';\r\nimport { CONSTANTS, EquirectangularAdapter, PSVError, utils } from '../..';\r\nimport { Queue } from '../shared/Queue';\r\nimport { Task } from '../shared/Task';\r\nimport { buildErrorMaterial, createBaseTexture } from '../shared/tiles-utils';\r\n\r\n\r\n/**\r\n * @callback TileUrl\r\n * @summary Function called to build a tile url\r\n * @memberOf PSV.adapters.EquirectangularTilesAdapter\r\n * @param {int} col\r\n * @param {int} row\r\n * @returns {string}\r\n */\r\n\r\n/**\r\n * @typedef {Object} PSV.adapters.EquirectangularTilesAdapter.Panorama\r\n * @summary Configuration of a tiled panorama\r\n * @property {string} [baseUrl] - low resolution panorama loaded before tiles\r\n * @property {PSV.PanoData | PSV.PanoDataProvider} [basePanoData] - panoData configuration associated to low resolution panorama loaded before tiles\r\n * @property {int} width - complete panorama width (height is always width/2)\r\n * @property {int} cols - number of vertical tiles\r\n * @property {int} rows - number of horizontal tiles\r\n * @property {PSV.adapters.EquirectangularTilesAdapter.TileUrl} tileUrl - function to build a tile url\r\n */\r\n\r\n/**\r\n * @typedef {Object} PSV.adapters.EquirectangularTilesAdapter.Options\r\n * @property {number} [resolution=64] - number of faces of the sphere geometry, higher values may decrease performances\r\n * @property {boolean} [showErrorTile=true] - shows a warning sign on tiles that cannot be loaded\r\n * @property {boolean} [baseBlur=true] - applies a blur to the low resolution panorama\r\n */\r\n\r\n/**\r\n * @typedef {Object} PSV.adapters.EquirectangularTilesAdapter.Tile\r\n * @private\r\n * @property {int} col\r\n * @property {int} row\r\n * @property {float} angle\r\n */\r\n\r\n/* the faces of the top and bottom rows are made of a single triangle (3 vertices)\r\n * all other faces are made of two triangles (6 vertices)\r\n * bellow is the indexing of each face vertices\r\n *\r\n * first row faces:\r\n *     ⋀\r\n *    /0\\\r\n *   /   \\\r\n *  /     \\\r\n * /1     2\\\r\n * ¯¯¯¯¯¯¯¯¯\r\n *\r\n * other rows faces:\r\n * _________\r\n * |\\1    0|\r\n * |3\\     |\r\n * |  \\    |\r\n * |   \\   |\r\n * |    \\  |\r\n * |     \\2|\r\n * |4    5\\|\r\n * ¯¯¯¯¯¯¯¯¯\r\n *\r\n * last row faces:\r\n * _________\r\n * \\1     0/\r\n *  \\     /\r\n *   \\   /\r\n *    \\2/\r\n *     ⋁\r\n */\r\n\r\nconst ATTR_UV = 'uv';\r\nconst ATTR_ORIGINAL_UV = 'originaluv';\r\nconst ATTR_POSITION = 'position';\r\n\r\nfunction tileId(tile) {\r\n  return `${tile.col}x${tile.row}`;\r\n}\r\n\r\nconst frustum = new THREE.Frustum();\r\nconst projScreenMatrix = new THREE.Matrix4();\r\nconst vertexPosition = new THREE.Vector3();\r\n\r\n\r\n/**\r\n * @summary Adapter for tiled panoramas\r\n * @memberof PSV.adapters\r\n * @extends PSV.adapters.AbstractAdapter\r\n */\r\nexport class EquirectangularTilesAdapter extends EquirectangularAdapter {\r\n\r\n  static id = 'equirectangular-tiles';\r\n  static supportsDownload = false;\r\n\r\n  /**\r\n   * @param {PSV.Viewer} psv\r\n   * @param {PSV.adapters.EquirectangularTilesAdapter.Options} options\r\n   */\r\n  constructor(psv, options) {\r\n    super(psv);\r\n\r\n    this.psv.config.useXmpData = false;\r\n\r\n    /**\r\n     * @member {PSV.adapters.EquirectangularTilesAdapter.Options}\r\n     * @private\r\n     */\r\n    this.config = {\r\n      resolution   : 64,\r\n      showErrorTile: true,\r\n      baseBlur     : true,\r\n      ...options,\r\n    };\r\n\r\n    if (!utils.isPowerOfTwo(this.config.resolution)) {\r\n      throw new PSVError('EquirectangularAdapter resolution must be power of two');\r\n    }\r\n\r\n    this.SPHERE_SEGMENTS = this.config.resolution;\r\n    this.SPHERE_HORIZONTAL_SEGMENTS = this.SPHERE_SEGMENTS / 2;\r\n    this.NB_VERTICES_BY_FACE = 6;\r\n    this.NB_VERTICES_BY_SMALL_FACE = 3;\r\n    this.NB_VERTICES = 2 * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE\r\n      + (this.SPHERE_HORIZONTAL_SEGMENTS - 2) * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE;\r\n    this.NB_GROUPS = this.SPHERE_SEGMENTS * this.SPHERE_HORIZONTAL_SEGMENTS;\r\n\r\n    /**\r\n     * @member {PSV.adapters.Queue}\r\n     * @private\r\n     */\r\n    this.queue = new Queue();\r\n\r\n    /**\r\n     * @type {Object}\r\n     * @property {int} colSize - size in pixels of a column\r\n     * @property {int} rowSize - size in pixels of a row\r\n     * @property {int} facesByCol - number of mesh faces by column\r\n     * @property {int} facesByRow - number of mesh faces by row\r\n     * @property {Record<string, boolean>} tiles - loaded tiles\r\n     * @property {external:THREE.SphereGeometry} geom\r\n     * @property {external:THREE.MeshBasicMaterial[]} materials\r\n     * @property {external:THREE.MeshBasicMaterial} errorMaterial\r\n     * @private\r\n     */\r\n    this.prop = {\r\n      colSize      : 0,\r\n      rowSize      : 0,\r\n      facesByCol   : 0,\r\n      facesByRow   : 0,\r\n      tiles        : {},\r\n      geom         : null,\r\n      materials    : [],\r\n      errorMaterial: null,\r\n    };\r\n\r\n    /**\r\n     * @member {external:THREE.ImageLoader}\r\n     * @private\r\n     */\r\n    this.loader = new THREE.ImageLoader();\r\n    if (this.psv.config.withCredentials) {\r\n      this.loader.setWithCredentials(true);\r\n    }\r\n    if (this.psv.config.requestHeaders && typeof this.psv.config.requestHeaders === 'object') {\r\n      this.loader.setRequestHeader(this.psv.config.requestHeaders);\r\n    }\r\n\r\n    this.psv.on(CONSTANTS.EVENTS.POSITION_UPDATED, this);\r\n    this.psv.on(CONSTANTS.EVENTS.ZOOM_UPDATED, this);\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  destroy() {\r\n    this.psv.off(CONSTANTS.EVENTS.POSITION_UPDATED, this);\r\n    this.psv.off(CONSTANTS.EVENTS.ZOOM_UPDATED, this);\r\n\r\n    this.__cleanup();\r\n\r\n    this.prop.errorMaterial?.map?.dispose();\r\n    this.prop.errorMaterial?.dispose();\r\n\r\n    delete this.queue;\r\n    delete this.loader;\r\n    delete this.prop.geom;\r\n    delete this.prop.errorMaterial;\r\n\r\n    super.destroy();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleEvent(e) {\r\n    /* eslint-disable */\r\n    switch (e.type) {\r\n      case CONSTANTS.EVENTS.POSITION_UPDATED:\r\n      case CONSTANTS.EVENTS.ZOOM_UPDATED:\r\n        this.__refresh();\r\n        break;\r\n    }\r\n    /* eslint-enable */\r\n  }\r\n\r\n  /**\r\n   * @summary Clears loading queue, dispose all materials\r\n   * @private\r\n   */\r\n  __cleanup() {\r\n    this.queue.clear();\r\n    this.prop.tiles = {};\r\n\r\n    this.prop.materials.forEach((mat) => {\r\n      mat?.map?.dispose();\r\n      mat?.dispose();\r\n    });\r\n    this.prop.materials.length = 0;\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  supportsTransition(panorama) {\r\n    return !!panorama.baseUrl;\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  supportsPreload(panorama) {\r\n    return !!panorama.baseUrl;\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   * @param {PSV.adapters.EquirectangularTilesAdapter.Panorama} panorama\r\n   * @returns {Promise.<PSV.TextureData>}\r\n   */\r\n  loadTexture(panorama) {\r\n    if (typeof panorama !== 'object' || !panorama.width || !panorama.cols || !panorama.rows || !panorama.tileUrl) {\r\n      return Promise.reject(new PSVError('Invalid panorama configuration, are you using the right adapter?'));\r\n    }\r\n    if (panorama.cols > this.SPHERE_SEGMENTS) {\r\n      return Promise.reject(new PSVError(`Panorama cols must not be greater than ${this.SPHERE_SEGMENTS}.`));\r\n    }\r\n    if (panorama.rows > this.SPHERE_HORIZONTAL_SEGMENTS) {\r\n      return Promise.reject(new PSVError(`Panorama rows must not be greater than ${this.SPHERE_HORIZONTAL_SEGMENTS}.`));\r\n    }\r\n    if (!utils.isPowerOfTwo(panorama.cols) || !utils.isPowerOfTwo(panorama.rows)) {\r\n      return Promise.reject(new PSVError('Panorama cols and rows must be powers of 2.'));\r\n    }\r\n\r\n    const panoData = {\r\n      fullWidth    : panorama.width,\r\n      fullHeight   : panorama.width / 2,\r\n      croppedWidth : panorama.width,\r\n      croppedHeight: panorama.width / 2,\r\n      croppedX     : 0,\r\n      croppedY     : 0,\r\n      poseHeading  : 0,\r\n      posePitch    : 0,\r\n      poseRoll     : 0,\r\n    };\r\n\r\n    if (panorama.baseUrl) {\r\n      return super.loadTexture(panorama.baseUrl, panorama.basePanoData)\r\n        .then(textureData => ({\r\n          panorama: panorama,\r\n          texture : textureData.texture,\r\n          panoData: panoData,\r\n        }));\r\n    }\r\n    else {\r\n      return Promise.resolve({ panorama, panoData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  createMesh(scale = 1) {\r\n    const geometry = new THREE.SphereGeometry(\r\n      CONSTANTS.SPHERE_RADIUS * scale,\r\n      this.SPHERE_SEGMENTS,\r\n      this.SPHERE_HORIZONTAL_SEGMENTS,\r\n      -Math.PI / 2\r\n    )\r\n      .scale(-1, 1, 1)\r\n      .toNonIndexed();\r\n\r\n    geometry.clearGroups();\r\n    let i = 0;\r\n    let k = 0;\r\n    // first row\r\n    for (; i < this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE; i += this.NB_VERTICES_BY_SMALL_FACE) {\r\n      geometry.addGroup(i, this.NB_VERTICES_BY_SMALL_FACE, k++);\r\n    }\r\n    // second to before last rows\r\n    for (; i < this.NB_VERTICES - this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE; i += this.NB_VERTICES_BY_FACE) {\r\n      geometry.addGroup(i, this.NB_VERTICES_BY_FACE, k++);\r\n    }\r\n    // last row\r\n    for (; i < this.NB_VERTICES; i += this.NB_VERTICES_BY_SMALL_FACE) {\r\n      geometry.addGroup(i, this.NB_VERTICES_BY_SMALL_FACE, k++);\r\n    }\r\n\r\n    geometry.setAttribute(ATTR_ORIGINAL_UV, geometry.getAttribute(ATTR_UV).clone());\r\n\r\n    return new THREE.Mesh(geometry, []);\r\n  }\r\n\r\n  /**\r\n   * @summary Applies the base texture and starts the loading of tiles\r\n   * @override\r\n   */\r\n  setTexture(mesh, textureData, transition) {\r\n    const { panorama, texture } = textureData;\r\n\r\n    if (transition) {\r\n      this.__setTexture(mesh, texture);\r\n      return;\r\n    }\r\n\r\n    this.__cleanup();\r\n    this.__setTexture(mesh, texture);\r\n\r\n    this.prop.materials = mesh.material;\r\n    this.prop.geom = mesh.geometry;\r\n    this.prop.geom.setAttribute(ATTR_UV, this.prop.geom.getAttribute(ATTR_ORIGINAL_UV).clone());\r\n\r\n    this.prop.colSize = panorama.width / panorama.cols;\r\n    this.prop.rowSize = panorama.width / 2 / panorama.rows;\r\n    this.prop.facesByCol = this.SPHERE_SEGMENTS / panorama.cols;\r\n    this.prop.facesByRow = this.SPHERE_HORIZONTAL_SEGMENTS / panorama.rows;\r\n\r\n    // this.psv.renderer.scene.add(createWireFrame(this.prop.geom));\r\n\r\n    setTimeout(() => this.__refresh(true));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  __setTexture(mesh, texture) {\r\n    let material;\r\n    if (texture) {\r\n      material = new THREE.MeshBasicMaterial({ map: texture });\r\n    }\r\n    else {\r\n      material = new THREE.MeshBasicMaterial({ opacity: 0, transparent: true });\r\n    }\r\n\r\n    for (let i = 0; i < this.NB_GROUPS; i++) {\r\n      mesh.material.push(material);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  setTextureOpacity(mesh, opacity) {\r\n    mesh.material[0].opacity = opacity;\r\n    mesh.material[0].transparent = opacity < 1;\r\n  }\r\n\r\n  /**\r\n   * @summary Compute visible tiles and load them\r\n   * @param {boolean} [init=false] Indicates initial call\r\n   * @private\r\n   */\r\n  __refresh(init = false) { // eslint-disable-line no-unused-vars\r\n    if (!this.prop.geom) {\r\n      return;\r\n    }\r\n\r\n    const camera = this.psv.renderer.camera;\r\n    camera.updateMatrixWorld();\r\n    projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\r\n    frustum.setFromProjectionMatrix(projScreenMatrix);\r\n\r\n    const panorama = this.psv.config.panorama;\r\n    const verticesPosition = this.prop.geom.getAttribute(ATTR_POSITION);\r\n    const tilesToLoad = [];\r\n\r\n    for (let col = 0; col < panorama.cols; col++) {\r\n      for (let row = 0; row < panorama.rows; row++) {\r\n        // for each tile, find the vertices corresponding to the four corners (three for first and last rows)\r\n        // if at least one vertex is visible, the tile must be loaded\r\n        // for larger tiles we also test the four edges centers and the tile center\r\n\r\n        const verticesIndex = [];\r\n\r\n        if (row === 0) {\r\n          // bottom-left\r\n          const v0 = this.prop.facesByRow === 1\r\n            ? col * this.prop.facesByCol * this.NB_VERTICES_BY_SMALL_FACE + 1\r\n            : this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE\r\n            + (this.prop.facesByRow - 2) * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE\r\n            + col * this.prop.facesByCol * this.NB_VERTICES_BY_FACE + 4;\r\n\r\n          // bottom-right\r\n          const v1 = this.prop.facesByRow === 1\r\n            ? v0 + (this.prop.facesByCol - 1) * this.NB_VERTICES_BY_SMALL_FACE + 1\r\n            : v0 + (this.prop.facesByCol - 1) * this.NB_VERTICES_BY_FACE + 1;\r\n\r\n          // top (all vertices are equal)\r\n          const v2 = 0;\r\n\r\n          verticesIndex.push(v0, v1, v2);\r\n\r\n          if (this.prop.facesByCol >= this.SPHERE_SEGMENTS / 8) {\r\n            // bottom-center\r\n            const v4 = v0 + this.prop.facesByCol / 2 * this.NB_VERTICES_BY_FACE;\r\n\r\n            verticesIndex.push(v4);\r\n          }\r\n\r\n          if (this.prop.facesByRow >= this.SPHERE_HORIZONTAL_SEGMENTS / 4) {\r\n            // left-center\r\n            const v6 = v0 - this.prop.facesByRow / 2 * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE;\r\n\r\n            // right-center\r\n            const v7 = v1 - this.prop.facesByRow / 2 * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE;\r\n\r\n            verticesIndex.push(v6, v7);\r\n          }\r\n        }\r\n        else if (row === panorama.rows - 1) {\r\n          // top-left\r\n          const v0 = this.prop.facesByRow === 1\r\n            ? -this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE\r\n            + row * this.prop.facesByRow * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE\r\n            + col * this.prop.facesByCol * this.NB_VERTICES_BY_SMALL_FACE + 1\r\n            : -this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE\r\n            + row * this.prop.facesByRow * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE\r\n            + col * this.prop.facesByCol * this.NB_VERTICES_BY_FACE + 1;\r\n\r\n          // top-right\r\n          const v1 = this.prop.facesByRow === 1\r\n            ? v0 + (this.prop.facesByCol - 1) * this.NB_VERTICES_BY_SMALL_FACE - 1\r\n            : v0 + (this.prop.facesByCol - 1) * this.NB_VERTICES_BY_FACE - 1;\r\n\r\n          // bottom (all vertices are equal)\r\n          const v2 = this.NB_VERTICES - 1;\r\n\r\n          verticesIndex.push(v0, v1, v2);\r\n\r\n          if (this.prop.facesByCol >= this.SPHERE_SEGMENTS / 8) {\r\n            // top-center\r\n            const v4 = v0 + this.prop.facesByCol / 2 * this.NB_VERTICES_BY_FACE;\r\n\r\n            verticesIndex.push(v4);\r\n          }\r\n\r\n          if (this.prop.facesByRow >= this.SPHERE_HORIZONTAL_SEGMENTS / 4) {\r\n            // left-center\r\n            const v6 = v0 + this.prop.facesByRow / 2 * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE;\r\n\r\n            // right-center\r\n            const v7 = v1 + this.prop.facesByRow / 2 * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE;\r\n\r\n            verticesIndex.push(v6, v7);\r\n          }\r\n        }\r\n        else {\r\n          // top-left\r\n          const v0 = -this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE\r\n            + row * this.prop.facesByRow * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE\r\n            + col * this.prop.facesByCol * this.NB_VERTICES_BY_FACE + 1;\r\n\r\n          // bottom-left\r\n          const v1 = v0 + (this.prop.facesByRow - 1) * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE + 3;\r\n\r\n          // bottom-right\r\n          const v2 = v1 + (this.prop.facesByCol - 1) * this.NB_VERTICES_BY_FACE + 1;\r\n\r\n          // top-right\r\n          const v3 = v0 + (this.prop.facesByCol - 1) * this.NB_VERTICES_BY_FACE - 1;\r\n\r\n          verticesIndex.push(v0, v1, v2, v3);\r\n\r\n          if (this.prop.facesByCol >= this.SPHERE_SEGMENTS / 8) {\r\n            // top-center\r\n            const v4 = v0 + this.prop.facesByCol / 2 * this.NB_VERTICES_BY_FACE;\r\n\r\n            // bottom-center\r\n            const v5 = v1 + this.prop.facesByCol / 2 * this.NB_VERTICES_BY_FACE;\r\n\r\n            verticesIndex.push(v4, v5);\r\n          }\r\n\r\n          if (this.prop.facesByRow >= this.SPHERE_HORIZONTAL_SEGMENTS / 4) {\r\n            // left-center\r\n            const v6 = v0 + this.prop.facesByRow / 2 * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE;\r\n\r\n            // right-center\r\n            const v7 = v3 + this.prop.facesByRow / 2 * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE;\r\n\r\n            verticesIndex.push(v6, v7);\r\n\r\n            if (this.prop.facesByCol >= this.SPHERE_SEGMENTS / 8) {\r\n              // center-center\r\n              const v8 = v6 + this.prop.facesByCol / 2 * this.NB_VERTICES_BY_FACE;\r\n\r\n              verticesIndex.push(v8);\r\n            }\r\n          }\r\n        }\r\n\r\n        // if (init && col === 0 && row === 0) {\r\n        //   verticesIndex.forEach((vertexIdx) => {\r\n        //     this.psv.renderer.scene.add(createDot(\r\n        //       verticesPosition.getX(vertexIdx),\r\n        //       verticesPosition.getY(vertexIdx),\r\n        //       verticesPosition.getZ(vertexIdx)\r\n        //     ));\r\n        //   });\r\n        // }\r\n\r\n        const vertexVisible = verticesIndex.some((vertexIdx) => {\r\n          vertexPosition.set(\r\n            verticesPosition.getX(vertexIdx),\r\n            verticesPosition.getY(vertexIdx),\r\n            verticesPosition.getZ(vertexIdx)\r\n          );\r\n          vertexPosition.applyEuler(this.psv.renderer.meshContainer.rotation);\r\n          return frustum.containsPoint(vertexPosition);\r\n        });\r\n\r\n        if (vertexVisible) {\r\n          let angle = vertexPosition.angleTo(this.psv.prop.direction);\r\n          if (row === 0 || row === panorama.rows - 1) {\r\n            angle *= 2; // lower priority to top and bottom tiles\r\n          }\r\n          tilesToLoad.push({ col, row, angle });\r\n        }\r\n      }\r\n    }\r\n\r\n    this.__loadTiles(tilesToLoad);\r\n  }\r\n\r\n  /**\r\n   * @summary Loads tiles and change existing tiles priority\r\n   * @param {PSV.adapters.EquirectangularTilesAdapter.Tile[]} tiles\r\n   * @private\r\n   */\r\n  __loadTiles(tiles) {\r\n    this.queue.disableAllTasks();\r\n\r\n    tiles.forEach((tile) => {\r\n      const id = tileId(tile);\r\n\r\n      if (this.prop.tiles[id]) {\r\n        this.queue.setPriority(id, tile.angle);\r\n      }\r\n      else {\r\n        this.prop.tiles[id] = true;\r\n        this.queue.enqueue(new Task(id, tile.angle, task => this.__loadTile(tile, task)));\r\n      }\r\n    });\r\n\r\n    this.queue.start();\r\n  }\r\n\r\n  /**\r\n   * @summary Loads and draw a tile\r\n   * @param {PSV.adapters.EquirectangularTilesAdapter.Tile} tile\r\n   * @param {PSV.adapters.Task} task\r\n   * @return {Promise}\r\n   * @private\r\n   */\r\n  __loadTile(tile, task) {\r\n    const panorama = this.psv.config.panorama;\r\n    const url = panorama.tileUrl(tile.col, tile.row);\r\n\r\n    if (this.psv.config.requestHeaders && typeof this.psv.config.requestHeaders === 'function') {\r\n      this.loader.setRequestHeader(this.psv.config.requestHeaders(url));\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.loader.load(url, resolve, undefined, reject);\r\n    })\r\n      .then((image) => {\r\n        if (!task.isCancelled()) {\r\n          const material = new THREE.MeshBasicMaterial({ map: utils.createTexture(image) });\r\n          this.__swapMaterial(tile.col, tile.row, material);\r\n          this.psv.needsUpdate();\r\n        }\r\n      })\r\n      .catch(() => {\r\n        if (!task.isCancelled() && this.config.showErrorTile) {\r\n          if (!this.prop.errorMaterial) {\r\n            this.prop.errorMaterial = buildErrorMaterial(this.prop.colSize, this.prop.rowSize);\r\n          }\r\n          this.__swapMaterial(tile.col, tile.row, this.prop.errorMaterial);\r\n          this.psv.needsUpdate();\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @summary Applies a new texture to the faces\r\n   * @param {int} col\r\n   * @param {int} row\r\n   * @param {external:THREE.MeshBasicMaterial} material\r\n   * @private\r\n   */\r\n  __swapMaterial(col, row, material) {\r\n    const uvs = this.prop.geom.getAttribute(ATTR_UV);\r\n\r\n    for (let c = 0; c < this.prop.facesByCol; c++) {\r\n      for (let r = 0; r < this.prop.facesByRow; r++) {\r\n        // position of the face (two triangles of the same square)\r\n        const faceCol = col * this.prop.facesByCol + c;\r\n        const faceRow = row * this.prop.facesByRow + r;\r\n        const isFirstRow = faceRow === 0;\r\n        const isLastRow = faceRow === (this.SPHERE_HORIZONTAL_SEGMENTS - 1);\r\n\r\n        // first vertex for this face (3 or 6 vertices in total)\r\n        let firstVertex;\r\n        if (isFirstRow) {\r\n          firstVertex = faceCol * this.NB_VERTICES_BY_SMALL_FACE;\r\n        }\r\n        else if (isLastRow) {\r\n          firstVertex = this.NB_VERTICES\r\n            - this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE\r\n            + faceCol * this.NB_VERTICES_BY_SMALL_FACE;\r\n        }\r\n        else {\r\n          firstVertex = this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE\r\n            + (faceRow - 1) * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE\r\n            + faceCol * this.NB_VERTICES_BY_FACE;\r\n        }\r\n\r\n        // swap material\r\n        const matIndex = this.prop.geom.groups.find(g => g.start === firstVertex).materialIndex;\r\n        this.prop.materials[matIndex] = material;\r\n\r\n        // define new uvs\r\n        const top = 1 - r / this.prop.facesByRow;\r\n        const bottom = 1 - (r + 1) / this.prop.facesByRow;\r\n        const left = c / this.prop.facesByCol;\r\n        const right = (c + 1) / this.prop.facesByCol;\r\n\r\n        if (isFirstRow) {\r\n          uvs.setXY(firstVertex, (left + right) / 2, top);\r\n          uvs.setXY(firstVertex + 1, left, bottom);\r\n          uvs.setXY(firstVertex + 2, right, bottom);\r\n        }\r\n        else if (isLastRow) {\r\n          uvs.setXY(firstVertex, right, top);\r\n          uvs.setXY(firstVertex + 1, left, top);\r\n          uvs.setXY(firstVertex + 2, (left + right) / 2, bottom);\r\n        }\r\n        else {\r\n          uvs.setXY(firstVertex, right, top);\r\n          uvs.setXY(firstVertex + 1, left, top);\r\n          uvs.setXY(firstVertex + 2, right, bottom);\r\n          uvs.setXY(firstVertex + 3, left, top);\r\n          uvs.setXY(firstVertex + 4, left, bottom);\r\n          uvs.setXY(firstVertex + 5, right, bottom);\r\n        }\r\n      }\r\n    }\r\n\r\n    uvs.needsUpdate = true;\r\n  }\r\n\r\n  /**\r\n   * @summary Create the texture for the base image\r\n   * @param {HTMLImageElement} img\r\n   * @return {external:THREE.Texture}\r\n   * @private\r\n   */\r\n  __createBaseTexture(img) {\r\n    if (img.width !== img.height * 2) {\r\n      utils.logWarn('Invalid base image, the width should be twice the height');\r\n    }\r\n\r\n    return createBaseTexture(img, this.config.baseBlur, w => w / 2);\r\n  }\r\n\r\n}\r\n"],"names":["Task","id","priority","fn","status","STATUS","PENDING","start","RUNNING","then","DONE","ERROR","cancel","CANCELLED","isCancelled","DISABLED","Queue","concurency","runningTasks","tasks","enqueue","task","clear","Object","values","forEach","setPriority","taskId","disableAllTasks","keys","length","nextTask","filter","sort","a","b","pop","buildErrorMaterial","width","height","canvas","document","createElement","ctx","getContext","fillStyle","fillRect","font","textAlign","textBaseline","fillText","texture","THREE","CanvasTexture","MeshBasicMaterial","map","createBaseTexture","img","blur","getHeight","SYSTEM","maxTextureWidth","ratio","Math","min","getMaxCanvasWidth","buffer","drawImage","utils","createTexture","ATTR_UV","ATTR_ORIGINAL_UV","ATTR_POSITION","tileId","tile","col","row","frustum","Frustum","projScreenMatrix","Matrix4","vertexPosition","Vector3","EquirectangularTilesAdapter","psv","options","config","useXmpData","resolution","showErrorTile","baseBlur","isPowerOfTwo","PSVError","SPHERE_SEGMENTS","SPHERE_HORIZONTAL_SEGMENTS","NB_VERTICES_BY_FACE","NB_VERTICES_BY_SMALL_FACE","NB_VERTICES","NB_GROUPS","queue","prop","colSize","rowSize","facesByCol","facesByRow","tiles","geom","materials","errorMaterial","loader","ImageLoader","withCredentials","setWithCredentials","requestHeaders","setRequestHeader","on","CONSTANTS","EVENTS","POSITION_UPDATED","ZOOM_UPDATED","destroy","off","__cleanup","dispose","handleEvent","e","type","__refresh","mat","supportsTransition","panorama","baseUrl","supportsPreload","loadTexture","cols","rows","tileUrl","Promise","reject","panoData","fullWidth","fullHeight","croppedWidth","croppedHeight","croppedX","croppedY","poseHeading","posePitch","poseRoll","basePanoData","textureData","resolve","createMesh","scale","geometry","SphereGeometry","SPHERE_RADIUS","PI","toNonIndexed","clearGroups","i","k","addGroup","setAttribute","getAttribute","clone","Mesh","setTexture","mesh","transition","__setTexture","material","setTimeout","opacity","transparent","push","setTextureOpacity","init","camera","renderer","updateMatrixWorld","multiplyMatrices","projectionMatrix","matrixWorldInverse","setFromProjectionMatrix","verticesPosition","tilesToLoad","verticesIndex","v0","v1","v2","v4","v6","v7","v3","v5","v8","vertexVisible","some","vertexIdx","set","getX","getY","getZ","applyEuler","meshContainer","rotation","containsPoint","angle","angleTo","direction","__loadTiles","__loadTile","url","load","undefined","image","__swapMaterial","needsUpdate","catch","uvs","c","r","faceCol","faceRow","isFirstRow","isLastRow","firstVertex","matIndex","groups","find","g","materialIndex","top","bottom","left","right","setXY","__createBaseTexture","logWarn","w","EquirectangularAdapter","supportsDownload"],"mappings":"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"}