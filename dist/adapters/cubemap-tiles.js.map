{"version":3,"file":"cubemap-tiles.js","sources":["../../src/adapters/shared/Task.js","../../src/adapters/shared/Queue.js","../../src/adapters/shared/tiles-utils.js","../../src/adapters/cubemap-tiles/index.js"],"sourcesContent":["/**\r\n * @summary Loading task\r\n * @memberOf PSV.adapters\r\n * @private\r\n */\r\nexport class Task {\r\n\r\n  static STATUS = {\r\n    DISABLED : -1,\r\n    PENDING  : 0,\r\n    RUNNING  : 1,\r\n    CANCELLED: 2,\r\n    DONE     : 3,\r\n    ERROR    : 4,\r\n  };\r\n\r\n  /**\r\n   * @param {string} id\r\n   * @param {number} priority\r\n   * @param {function(Task): Promise} fn\r\n   */\r\n  constructor(id, priority, fn) {\r\n    this.id = id;\r\n    this.priority = priority;\r\n    this.fn = fn;\r\n    this.status = Task.STATUS.PENDING;\r\n  }\r\n\r\n  start() {\r\n    this.status = Task.STATUS.RUNNING;\r\n    return this.fn(this)\r\n      .then(() => {\r\n        this.status = Task.STATUS.DONE;\r\n      }, () => {\r\n        this.status = Task.STATUS.ERROR;\r\n      });\r\n  }\r\n\r\n  cancel() {\r\n    this.status = Task.STATUS.CANCELLED;\r\n  }\r\n\r\n  isCancelled() {\r\n    return this.status === Task.STATUS.CANCELLED;\r\n  }\r\n\r\n}\r\n","import { Task } from './Task';\r\n\r\n/**\r\n * @summary Loading queue\r\n * @memberOf PSV.adapters\r\n * @private\r\n */\r\nexport class Queue {\r\n\r\n  /**\r\n   * @param {int} concurency\r\n   */\r\n  constructor(concurency = 4) {\r\n    this.concurency = concurency;\r\n    this.runningTasks = {};\r\n    this.tasks = {};\r\n  }\r\n\r\n  enqueue(task) {\r\n    this.tasks[task.id] = task;\r\n  }\r\n\r\n  clear() {\r\n    Object.values(this.tasks).forEach(task => task.cancel());\r\n    this.tasks = {};\r\n    this.runningTasks = {};\r\n  }\r\n\r\n  setPriority(taskId, priority) {\r\n    const task = this.tasks[taskId];\r\n    if (task) {\r\n      task.priority = priority;\r\n      if (task.status === Task.STATUS.DISABLED) {\r\n        task.status = Task.STATUS.PENDING;\r\n      }\r\n    }\r\n  }\r\n\r\n  disableAllTasks() {\r\n    Object.values(this.tasks).forEach((task) => {\r\n      task.status = Task.STATUS.DISABLED;\r\n    });\r\n  }\r\n\r\n  start() {\r\n    if (Object.keys(this.runningTasks).length >= this.concurency) {\r\n      return;\r\n    }\r\n\r\n    const nextTask = Object.values(this.tasks)\r\n      .filter(task => task.status === Task.STATUS.PENDING)\r\n      .sort((a, b) => b.priority - a.priority)\r\n      .pop();\r\n\r\n    if (nextTask) {\r\n      this.runningTasks[nextTask.id] = true;\r\n\r\n      nextTask.start()\r\n        .then(() => {\r\n          if (!nextTask.isCancelled()) {\r\n            delete this.tasks[nextTask.id];\r\n            delete this.runningTasks[nextTask.id];\r\n            this.start();\r\n          }\r\n        });\r\n\r\n      this.start(); // start tasks until max concurrency is reached\r\n    }\r\n  }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { SYSTEM, utils } from '../..';\r\n\r\n/**\r\n * @summary Generates an material for errored tiles\r\n * @memberOf PSV.adapters\r\n * @return {external:THREE.MeshBasicMaterial}\r\n * @private\r\n */\r\nexport function buildErrorMaterial(width, height) {\r\n  const canvas = document.createElement('canvas');\r\n  canvas.width = width;\r\n  canvas.height = height;\r\n\r\n  const ctx = canvas.getContext('2d');\r\n\r\n  ctx.fillStyle = '#333';\r\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n  ctx.font = `${canvas.width / 5}px serif`;\r\n  ctx.fillStyle = '#a22';\r\n  ctx.textAlign = 'center';\r\n  ctx.textBaseline = 'middle';\r\n  ctx.fillText('âš ', canvas.width / 2, canvas.height / 2);\r\n\r\n  const texture = new THREE.CanvasTexture(canvas);\r\n  return new THREE.MeshBasicMaterial({ map: texture });\r\n}\r\n\r\n/**\r\n * @summary Create the texture for the base image\r\n * @memberOf PSV.adapters\r\n * @param {HTMLImageElement} img\r\n * @param {boolean} blur\r\n * @param {function} getHeight\r\n * @return {external:THREE.Texture}\r\n * @private\r\n */\r\nexport function createBaseTexture(img, blur, getHeight) {\r\n  if (blur || img.width > SYSTEM.maxTextureWidth) {\r\n    const ratio = Math.min(1, SYSTEM.getMaxCanvasWidth() / img.width);\r\n\r\n    const buffer = document.createElement('canvas');\r\n    buffer.width = img.width * ratio;\r\n    buffer.height = getHeight(img.width);\r\n\r\n    const ctx = buffer.getContext('2d');\r\n    if (blur) {\r\n      ctx.filter = 'blur(1px)';\r\n    }\r\n    ctx.drawImage(img, 0, 0, buffer.width, buffer.height);\r\n\r\n    return utils.createTexture(buffer);\r\n  }\r\n\r\n  return utils.createTexture(img);\r\n}\r\n\r\n/**\r\n * @summary Creates a wireframe geometry, for debug\r\n * @memberOf PSV.adapters\r\n * @param {THREE.BufferGeometry} geometry\r\n * @return {THREE.Object3D}\r\n * @private\r\n */\r\nexport function createWireFrame(geometry) {\r\n  const wireframe = new THREE.WireframeGeometry(geometry);\r\n  const line = new THREE.LineSegments(wireframe);\r\n  line.material.depthTest = false;\r\n  line.material.opacity = 0.25;\r\n  line.material.transparent = true;\r\n  return line;\r\n}\r\n\r\n/**\r\n * @summary Creates a small red sphere, for debug\r\n * @memberOf PSV.adapters\r\n * @return {THREE.Object3D}\r\n * @private\r\n */\r\nexport function createDot(x, y, z) {\r\n  const geom = new THREE.SphereGeometry(0.1);\r\n  const material = new THREE.MeshBasicMaterial({ color: 0xff0000 });\r\n  const mesh = new THREE.Mesh(geom, material);\r\n  mesh.position.set(x, y, z);\r\n  return mesh;\r\n}\r\n","import * as THREE from 'three';\r\nimport { CONSTANTS, PSVError, utils } from '../..';\r\nimport { CUBE_HASHMAP, CubemapAdapter } from '../cubemap';\r\nimport { Queue } from '../shared/Queue';\r\nimport { Task } from '../shared/Task';\r\nimport { buildErrorMaterial, createBaseTexture } from '../shared/tiles-utils';\r\n\r\nif (!CubemapAdapter) {\r\n  throw new PSVError('CubemapAdapter is missing, please load cubemap.js before cubemap-tiles.js');\r\n}\r\n\r\n\r\n/**\r\n * @callback TileUrl\r\n * @summary Function called to build a tile url\r\n * @memberOf PSV.adapters.CubemapTilesAdapter\r\n * @param {'left'|'front'|'right'|'back'|'top'|'bottom'} face\r\n * @param {int} col\r\n * @param {int} row\r\n * @returns {string}\r\n */\r\n\r\n/**\r\n * @typedef {Object} PSV.adapters.CubemapTilesAdapter.Panorama\r\n * @summary Configuration of a tiled cubemap\r\n * @property {PSV.adapters.CubemapAdapter.Cubemap} [baseUrl] - low resolution panorama loaded before tiles\r\n * @property {int} faceSize - size of a face\r\n * @property {int} nbTiles - number of tiles on a side of a face\r\n * @property {PSV.adapters.CubemapTilesAdapter.TileUrl} tileUrl - function to build a tile url\r\n */\r\n\r\n/**\r\n * @typedef {Object} PSV.adapters.CubemapTilesAdapter.Options\r\n * @property {boolean} [flipTopBottom=false] - set to true if the top and bottom faces are not correctly oriented\r\n * @property {boolean} [showErrorTile=true] - shows a warning sign on tiles that cannot be loaded\r\n * @property {boolean} [baseBlur=true] - applies a blur to the low resolution panorama\r\n */\r\n\r\n/**\r\n * @typedef {Object} PSV.adapters.CubemapTilesAdapter.Tile\r\n * @private\r\n * @property {int} face\r\n * @property {int} col\r\n * @property {int} row\r\n * @property {float} angle\r\n */\r\n\r\n\r\nconst CUBE_SEGMENTS = 16;\r\nconst NB_VERTICES_BY_FACE = 6;\r\nconst NB_VERTICES_BY_PLANE = NB_VERTICES_BY_FACE * CUBE_SEGMENTS * CUBE_SEGMENTS;\r\nconst NB_VERTICES = 6 * NB_VERTICES_BY_PLANE;\r\nconst NB_GROUPS_BY_FACE = CUBE_SEGMENTS * CUBE_SEGMENTS;\r\n\r\nconst ATTR_UV = 'uv';\r\nconst ATTR_ORIGINAL_UV = 'originaluv';\r\nconst ATTR_POSITION = 'position';\r\n\r\nfunction tileId(tile) {\r\n  return `${tile.face}:${tile.col}x${tile.row}`;\r\n}\r\n\r\nconst frustum = new THREE.Frustum();\r\nconst projScreenMatrix = new THREE.Matrix4();\r\nconst vertexPosition = new THREE.Vector3();\r\n\r\n/**\r\n * @summary Adapter for tiled cubemaps\r\n * @memberof PSV.adapters\r\n * @extends PSV.adapters.AbstractAdapter\r\n */\r\nexport class CubemapTilesAdapter extends CubemapAdapter {\r\n\r\n  static id = 'cubemap-tiles';\r\n  static supportsDownload = false;\r\n\r\n  /**\r\n   * @param {PSV.Viewer} psv\r\n   * @param {PSV.adapters.CubemapTilesAdapter.Options} options\r\n   */\r\n  constructor(psv, options) {\r\n    super(psv);\r\n\r\n    /**\r\n     * @member {PSV.adapters.CubemapTilesAdapter.Options}\r\n     * @private\r\n     */\r\n    this.config = {\r\n      flipTopBottom: false,\r\n      showErrorTile: true,\r\n      baseBlur     : true,\r\n      ...options,\r\n    };\r\n\r\n    /**\r\n     * @member {PSV.adapters.Queue}\r\n     * @private\r\n     */\r\n    this.queue = new Queue();\r\n\r\n    /**\r\n     * @type {Object}\r\n     * @property {int} tileSize - size in pixels of a tile\r\n     * @property {int} facesByTile - number of mesh faces by tile\r\n     * @property {Record<string, boolean>} tiles - loaded tiles\r\n     * @property {external:THREE.BoxGeometry} geom\r\n     * @property {external:THREE.MeshBasicMaterial[]} materials\r\n     * @property {external:THREE.MeshBasicMaterial} errorMaterial\r\n     * @private\r\n     */\r\n    this.prop = {\r\n      tileSize     : 0,\r\n      facesByTile  : 0,\r\n      tiles        : {},\r\n      geom         : null,\r\n      materials    : [],\r\n      errorMaterial: null,\r\n    };\r\n\r\n    /**\r\n     * @member {external:THREE.ImageLoader}\r\n     * @private\r\n     */\r\n    this.loader = new THREE.ImageLoader();\r\n    if (this.psv.config.withCredentials) {\r\n      this.loader.setWithCredentials(true);\r\n    }\r\n    if (this.psv.config.requestHeaders && typeof this.psv.config.requestHeaders === 'object') {\r\n      this.loader.setRequestHeader(this.psv.config.requestHeaders);\r\n    }\r\n\r\n    this.psv.on(CONSTANTS.EVENTS.POSITION_UPDATED, this);\r\n    this.psv.on(CONSTANTS.EVENTS.ZOOM_UPDATED, this);\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  destroy() {\r\n    this.psv.off(CONSTANTS.EVENTS.POSITION_UPDATED, this);\r\n    this.psv.off(CONSTANTS.EVENTS.ZOOM_UPDATED, this);\r\n\r\n    this.__cleanup();\r\n\r\n    this.prop.errorMaterial?.map?.dispose();\r\n    this.prop.errorMaterial?.dispose();\r\n\r\n    delete this.queue;\r\n    delete this.loader;\r\n    delete this.prop.geom;\r\n    delete this.prop.errorMaterial;\r\n\r\n    super.destroy();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleEvent(e) {\r\n    /* eslint-disable */\r\n    switch (e.type) {\r\n      case CONSTANTS.EVENTS.POSITION_UPDATED:\r\n      case CONSTANTS.EVENTS.ZOOM_UPDATED:\r\n        this.__refresh();\r\n        break;\r\n    }\r\n    /* eslint-enable */\r\n  }\r\n\r\n  /**\r\n   * @summary Clears loading queue, dispose all materials\r\n   * @private\r\n   */\r\n  __cleanup() {\r\n    this.queue.clear();\r\n    this.prop.tiles = {};\r\n\r\n    this.prop.materials.forEach((mat) => {\r\n      mat?.map?.dispose();\r\n      mat?.dispose();\r\n    });\r\n    this.prop.materials.length = 0;\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  supportsTransition(panorama) {\r\n    return !!panorama.baseUrl;\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  supportsPreload(panorama) {\r\n    return !!panorama.baseUrl;\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   * @param {PSV.adapters.CubemapTilesAdapter.Panorama} panorama\r\n   * @returns {Promise.<PSV.TextureData>}\r\n   */\r\n  loadTexture(panorama) {\r\n    if (typeof panorama !== 'object' || !panorama.faceSize || !panorama.nbTiles || !panorama.tileUrl) {\r\n      return Promise.reject(new PSVError('Invalid panorama configuration, are you using the right adapter?'));\r\n    }\r\n    if (panorama.nbTiles > CUBE_SEGMENTS) {\r\n      return Promise.reject(new PSVError(`Panorama nbTiles must not be greater than ${CUBE_SEGMENTS}.`));\r\n    }\r\n    if (!utils.isPowerOfTwo(panorama.nbTiles)) {\r\n      return Promise.reject(new PSVError('Panorama nbTiles must be power of 2.'));\r\n    }\r\n\r\n    if (panorama.baseUrl) {\r\n      return super.loadTexture(panorama.baseUrl)\r\n        .then(textureData => ({\r\n          panorama: panorama,\r\n          texture : textureData.texture,\r\n        }));\r\n    }\r\n    else {\r\n      return Promise.resolve({ panorama });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  createMesh(scale = 1) {\r\n    const cubeSize = CONSTANTS.SPHERE_RADIUS * 2 * scale;\r\n    const geometry = new THREE.BoxGeometry(cubeSize, cubeSize, cubeSize, CUBE_SEGMENTS, CUBE_SEGMENTS, CUBE_SEGMENTS)\r\n      .scale(1, 1, -1)\r\n      .toNonIndexed();\r\n\r\n    geometry.clearGroups();\r\n    for (let i = 0, k = 0; i < NB_VERTICES; i += NB_VERTICES_BY_FACE) {\r\n      geometry.addGroup(i, NB_VERTICES_BY_FACE, k++);\r\n    }\r\n\r\n    geometry.setAttribute(ATTR_ORIGINAL_UV, geometry.getAttribute(ATTR_UV).clone());\r\n\r\n    return new THREE.Mesh(geometry, []);\r\n  }\r\n\r\n  /**\r\n   * @summary Applies the base texture and starts the loading of tiles\r\n   * @override\r\n   */\r\n  setTexture(mesh, textureData, transition) {\r\n    const { panorama, texture } = textureData;\r\n\r\n    if (transition) {\r\n      this.__setTexture(mesh, texture);\r\n      return;\r\n    }\r\n\r\n    this.__cleanup();\r\n    this.__setTexture(mesh, texture);\r\n\r\n    this.prop.materials = mesh.material;\r\n    this.prop.geom = mesh.geometry;\r\n    this.prop.geom.setAttribute(ATTR_UV, this.prop.geom.getAttribute(ATTR_ORIGINAL_UV).clone());\r\n\r\n    this.prop.tileSize = panorama.faceSize / panorama.nbTiles;\r\n    this.prop.facesByTile = CUBE_SEGMENTS / panorama.nbTiles;\r\n\r\n    // this.psv.renderer.scene.add(createWireFrame(this.prop.geom));\r\n\r\n    setTimeout(() => this.__refresh(true));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  __setTexture(mesh, texture) {\r\n    for (let i = 0; i < 6; i++) {\r\n      let material;\r\n      if (texture) {\r\n        if (this.config.flipTopBottom && (i === 2 || i === 3)) {\r\n          texture[i].center = new THREE.Vector2(0.5, 0.5);\r\n          texture[i].rotation = Math.PI;\r\n        }\r\n\r\n        material = new THREE.MeshBasicMaterial({ map: texture[i] });\r\n      }\r\n      else {\r\n        material = new THREE.MeshBasicMaterial({ opacity: 0, transparent: true });\r\n      }\r\n\r\n      for (let j = 0; j < NB_GROUPS_BY_FACE; j++) {\r\n        mesh.material.push(material);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  setTextureOpacity(mesh, opacity) {\r\n    for (let i = 0; i < 6; i++) {\r\n      mesh.material[i * NB_GROUPS_BY_FACE].opacity = opacity;\r\n      mesh.material[i * NB_GROUPS_BY_FACE].transparent = opacity < 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @summary Compute visible tiles and load them\r\n   * @private\r\n   */\r\n  __refresh(init = false) { // eslint-disable-line no-unused-vars\r\n    if (!this.prop.geom) {\r\n      return;\r\n    }\r\n\r\n    const camera = this.psv.renderer.camera;\r\n    camera.updateMatrixWorld();\r\n    projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\r\n    frustum.setFromProjectionMatrix(projScreenMatrix);\r\n\r\n    const panorama = this.psv.config.panorama;\r\n    const verticesPosition = this.prop.geom.getAttribute(ATTR_POSITION);\r\n    const tilesToLoad = [];\r\n\r\n    for (let face = 0; face < 6; face++) {\r\n      for (let col = 0; col < panorama.nbTiles; col++) {\r\n        for (let row = 0; row < panorama.nbTiles; row++) {\r\n          // for each tile, find the vertices corresponding to the four corners\r\n          // if at least one vertex is visible, the tile must be loaded\r\n          // for larger tiles we also test the four edges centers and the tile center\r\n          const verticesIndex = [];\r\n\r\n          // top-left\r\n          const v0 = face * NB_VERTICES_BY_PLANE\r\n            + row * this.prop.facesByTile * CUBE_SEGMENTS * NB_VERTICES_BY_FACE\r\n            + col * this.prop.facesByTile * NB_VERTICES_BY_FACE;\r\n\r\n          // bottom-left\r\n          const v1 = v0 + CUBE_SEGMENTS * NB_VERTICES_BY_FACE * (this.prop.facesByTile - 1) + 1;\r\n\r\n          // bottom-right\r\n          const v2 = v1 + this.prop.facesByTile * NB_VERTICES_BY_FACE - 3;\r\n\r\n          // top-right\r\n          const v3 = v0 + this.prop.facesByTile * NB_VERTICES_BY_FACE - 1;\r\n\r\n          verticesIndex.push(v0, v1, v2, v3);\r\n\r\n          if (this.prop.facesByTile >= CUBE_SEGMENTS / 2) {\r\n            // top-center\r\n            const v4 = v0 + this.prop.facesByTile / 2 * NB_VERTICES_BY_FACE - 1;\r\n\r\n            // bottom-center\r\n            const v5 = v1 + this.prop.facesByTile / 2 * NB_VERTICES_BY_FACE - 3;\r\n\r\n            // left-center\r\n            const v6 = v0 + CUBE_SEGMENTS * NB_VERTICES_BY_FACE * (this.prop.facesByTile / 2 - 1) + 1;\r\n\r\n            // right-center\r\n            const v7 = v6 + this.prop.facesByTile * NB_VERTICES_BY_FACE - 3;\r\n\r\n            // center-center\r\n            const v8 = v6 + this.prop.facesByTile / 2 * NB_VERTICES_BY_FACE;\r\n\r\n            verticesIndex.push(v4, v5, v6, v7, v8);\r\n          }\r\n\r\n          // if (init && face === 5 && col === 0 && row === 0) {\r\n          //   verticesIndex.forEach((vertexIdx) => {\r\n          //     this.psv.renderer.scene.add(createDot(\r\n          //       verticesPosition.getX(vertexIdx),\r\n          //       verticesPosition.getY(vertexIdx),\r\n          //       verticesPosition.getZ(vertexIdx)\r\n          //     ));\r\n          //   });\r\n          // }\r\n\r\n          const vertexVisible = verticesIndex.some((vertexIdx) => {\r\n            vertexPosition.set(\r\n              verticesPosition.getX(vertexIdx),\r\n              verticesPosition.getY(vertexIdx),\r\n              verticesPosition.getZ(vertexIdx)\r\n            );\r\n            vertexPosition.applyEuler(this.psv.renderer.meshContainer.rotation);\r\n            return frustum.containsPoint(vertexPosition);\r\n          });\r\n\r\n          if (vertexVisible) {\r\n            const angle = vertexPosition.angleTo(this.psv.prop.direction);\r\n            tilesToLoad.push({ face, col, row, angle });\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.__loadTiles(tilesToLoad);\r\n  }\r\n\r\n  /**\r\n   * @summary Loads tiles and change existing tiles priority\r\n   * @param {PSV.adapters.CubemapTilesAdapter.Tile[]} tiles\r\n   * @private\r\n   */\r\n  __loadTiles(tiles) {\r\n    this.queue.disableAllTasks();\r\n\r\n    tiles.forEach((tile) => {\r\n      const id = tileId(tile);\r\n\r\n      if (this.prop.tiles[id]) {\r\n        this.queue.setPriority(id, tile.angle);\r\n      }\r\n      else {\r\n        this.prop.tiles[id] = true;\r\n        this.queue.enqueue(new Task(id, tile.angle, task => this.__loadTile(tile, task)));\r\n      }\r\n    });\r\n\r\n    this.queue.start();\r\n  }\r\n\r\n  /**\r\n   * @summary Loads and draw a tile\r\n   * @param {PSV.adapters.CubemapTilesAdapter.Tile} tile\r\n   * @param {PSV.adapters.Task} task\r\n   * @return {Promise}\r\n   * @private\r\n   */\r\n  __loadTile(tile, task) {\r\n    const panorama = this.psv.config.panorama;\r\n\r\n    let { col, row } = tile;\r\n    if (this.config.flipTopBottom && (tile.face === 2 || tile.face === 3)) {\r\n      col = panorama.nbTiles - col - 1;\r\n      row = panorama.nbTiles - row - 1;\r\n    }\r\n    const url = panorama.tileUrl(CUBE_HASHMAP[tile.face], col, row);\r\n\r\n    if (this.psv.config.requestHeaders && typeof this.psv.config.requestHeaders === 'function') {\r\n      this.loader.setRequestHeader(this.psv.config.requestHeaders(url));\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.loader.load(url, resolve, undefined, reject);\r\n    })\r\n      .then((image) => {\r\n        if (!task.isCancelled()) {\r\n          const material = new THREE.MeshBasicMaterial({ map: utils.createTexture(image) });\r\n          this.__swapMaterial(tile.face, tile.col, tile.row, material);\r\n          this.psv.needsUpdate();\r\n        }\r\n      })\r\n      .catch(() => {\r\n        if (!task.isCancelled() && this.config.showErrorTile) {\r\n          if (!this.prop.errorMaterial) {\r\n            this.prop.errorMaterial = buildErrorMaterial(this.prop.tileSize, this.prop.tileSize);\r\n          }\r\n          this.__swapMaterial(tile.face, tile.col, tile.row, this.prop.errorMaterial);\r\n          this.psv.needsUpdate();\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @summary Applies a new texture to the faces\r\n   * @param {int} face\r\n   * @param {int} col\r\n   * @param {int} row\r\n   * @param {external:THREE.MeshBasicMaterial} material\r\n   * @private\r\n   */\r\n  __swapMaterial(face, col, row, material) {\r\n    const uvs = this.prop.geom.getAttribute(ATTR_UV);\r\n\r\n    for (let c = 0; c < this.prop.facesByTile; c++) {\r\n      for (let r = 0; r < this.prop.facesByTile; r++) {\r\n        // position of the face (two triangles of the same square)\r\n        const faceCol = col * this.prop.facesByTile + c;\r\n        const faceRow = row * this.prop.facesByTile + r;\r\n\r\n        // first vertex for this face (6 vertices in total)\r\n        const firstVertex = NB_VERTICES_BY_PLANE * face + 6 * (CUBE_SEGMENTS * faceRow + faceCol);\r\n\r\n        // swap material\r\n        const matIndex = this.prop.geom.groups.find(g => g.start === firstVertex).materialIndex;\r\n        this.prop.materials[matIndex] = material;\r\n\r\n        // define new uvs\r\n        let top = 1 - r / this.prop.facesByTile;\r\n        let bottom = 1 - (r + 1) / this.prop.facesByTile;\r\n        let left = c / this.prop.facesByTile;\r\n        let right = (c + 1) / this.prop.facesByTile;\r\n\r\n        if (this.config.flipTopBottom && (face === 2 || face === 3)) {\r\n          top = 1 - top;\r\n          bottom = 1 - bottom;\r\n          left = 1 - left;\r\n          right = 1 - right;\r\n        }\r\n\r\n        uvs.setXY(firstVertex, left, top);\r\n        uvs.setXY(firstVertex + 1, left, bottom);\r\n        uvs.setXY(firstVertex + 2, right, top);\r\n        uvs.setXY(firstVertex + 3, left, bottom);\r\n        uvs.setXY(firstVertex + 4, right, bottom);\r\n        uvs.setXY(firstVertex + 5, right, top);\r\n      }\r\n    }\r\n\r\n    uvs.needsUpdate = true;\r\n  }\r\n\r\n  /**\r\n   * @summary Create the texture for the base image\r\n   * @param {HTMLImageElement} img\r\n   * @return {external:THREE.Texture}\r\n   * @override\r\n   * @private\r\n   */\r\n  __createCubemapTexture(img) {\r\n    if (img.width !== img.height) {\r\n      utils.logWarn('Invalid base image, the width should equals the height');\r\n    }\r\n\r\n    return createBaseTexture(img, this.config.baseBlur, w => w);\r\n  }\r\n\r\n}\r\n"],"names":["Task","id","priority","fn","status","STATUS","PENDING","start","RUNNING","then","DONE","ERROR","cancel","CANCELLED","isCancelled","DISABLED","Queue","concurency","runningTasks","tasks","enqueue","task","clear","Object","values","forEach","setPriority","taskId","disableAllTasks","keys","length","nextTask","filter","sort","a","b","pop","buildErrorMaterial","width","height","canvas","document","createElement","ctx","getContext","fillStyle","fillRect","font","textAlign","textBaseline","fillText","texture","THREE","CanvasTexture","MeshBasicMaterial","map","createBaseTexture","img","blur","getHeight","SYSTEM","maxTextureWidth","ratio","Math","min","getMaxCanvasWidth","buffer","drawImage","utils","createTexture","CubemapAdapter","PSVError","CUBE_SEGMENTS","NB_VERTICES_BY_FACE","NB_VERTICES_BY_PLANE","NB_VERTICES","NB_GROUPS_BY_FACE","ATTR_UV","ATTR_ORIGINAL_UV","ATTR_POSITION","tileId","tile","face","col","row","frustum","Frustum","projScreenMatrix","Matrix4","vertexPosition","Vector3","CubemapTilesAdapter","psv","options","config","flipTopBottom","showErrorTile","baseBlur","queue","prop","tileSize","facesByTile","tiles","geom","materials","errorMaterial","loader","ImageLoader","withCredentials","setWithCredentials","requestHeaders","setRequestHeader","on","CONSTANTS","EVENTS","POSITION_UPDATED","ZOOM_UPDATED","destroy","off","__cleanup","dispose","handleEvent","e","type","__refresh","mat","supportsTransition","panorama","baseUrl","supportsPreload","loadTexture","faceSize","nbTiles","tileUrl","Promise","reject","isPowerOfTwo","textureData","resolve","createMesh","scale","cubeSize","SPHERE_RADIUS","geometry","BoxGeometry","toNonIndexed","clearGroups","i","k","addGroup","setAttribute","getAttribute","clone","Mesh","setTexture","mesh","transition","__setTexture","material","setTimeout","center","Vector2","rotation","PI","opacity","transparent","j","push","setTextureOpacity","init","camera","renderer","updateMatrixWorld","multiplyMatrices","projectionMatrix","matrixWorldInverse","setFromProjectionMatrix","verticesPosition","tilesToLoad","verticesIndex","v0","v1","v2","v3","v4","v5","v6","v7","v8","vertexVisible","some","vertexIdx","set","getX","getY","getZ","applyEuler","meshContainer","containsPoint","angle","angleTo","direction","__loadTiles","__loadTile","url","CUBE_HASHMAP","load","undefined","image","__swapMaterial","needsUpdate","catch","uvs","c","r","faceCol","faceRow","firstVertex","matIndex","groups","find","g","materialIndex","top","bottom","left","right","setXY","__createCubemapTexture","logWarn","w","supportsDownload"],"mappings":"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"}