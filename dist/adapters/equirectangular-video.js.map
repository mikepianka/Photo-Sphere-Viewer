{"version":3,"file":"equirectangular-video.js","sources":["../../src/adapters/shared/AbstractVideoAdapter.js","../../src/adapters/equirectangular-video/index.js"],"sourcesContent":["import * as THREE from 'three';\r\nimport { AbstractAdapter, CONSTANTS, PSVError } from '../..';\r\n\r\n/**\r\n * @typedef {Object} PSV.adapters.AbstractVideoAdapter.Video\r\n * @summary Object defining a video\r\n * @property {string} source\r\n */\r\n\r\n/**\r\n * @typedef {Object} PSV.adapters.AbstractVideoAdapter.Options\r\n * @property {boolean} [autoplay=false] - automatically start the video\r\n * @property {boolean} [muted=autoplay] - initially mute the video\r\n */\r\n\r\n/**\r\n * @summary Base video adapters class\r\n * @memberof PSV.adapters\r\n * @abstract\r\n * @private\r\n */\r\nexport class AbstractVideoAdapter extends AbstractAdapter {\r\n\r\n  static supportsTransition = false;\r\n  static supportsPreload = false;\r\n  static supportsDownload = false;\r\n\r\n  constructor(psv, options) {\r\n    super(psv);\r\n\r\n    /**\r\n     * @member {PSV.adapters.AbstractVideoAdapter.Options}\r\n     * @private\r\n     */\r\n    this.config = {\r\n      autoplay: false,\r\n      muted   : options?.autoplay ?? false,\r\n      ...options,\r\n    };\r\n\r\n    /**\r\n     * @member {HTMLVideoElement}\r\n     * @private\r\n     */\r\n    this.video = null;\r\n\r\n    this.psv.on(CONSTANTS.EVENTS.BEFORE_RENDER, this);\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  destroy() {\r\n    this.psv.off(CONSTANTS.EVENTS.BEFORE_RENDER, this);\r\n\r\n    this.__removeVideo();\r\n\r\n    super.destroy();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleEvent(e) {\r\n    /* eslint-disable */\r\n    switch (e.type) {\r\n      case CONSTANTS.EVENTS.BEFORE_RENDER:\r\n        if (this.video) {\r\n          this.psv.needsUpdate();\r\n        }\r\n        break;\r\n    }\r\n    /* eslint-enable */\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   * @param {PSV.adapters.AbstractVideoAdapter.Video} panorama\r\n   * @returns {Promise.<PSV.TextureData>}\r\n   */\r\n  loadTexture(panorama) {\r\n    if (typeof panorama !== 'object' || !panorama.source) {\r\n      return Promise.reject(new PSVError('Invalid panorama configuration, are you using the right adapter?'));\r\n    }\r\n\r\n    if (!this.psv.getPlugin('video')) {\r\n      return Promise.reject(new PSVError('Video adapters require VideoPlugin to be loaded too.'));\r\n    }\r\n\r\n    const video = this.__createVideo(panorama.source);\r\n\r\n    return this.__videoLoadPromise(video)\r\n      .then(() => {\r\n        const texture = new THREE.VideoTexture(video);\r\n        return { panorama, texture };\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  __switchVideo(texture) {\r\n    let currentTime;\r\n    let duration;\r\n    let paused = !this.config.autoplay;\r\n    let muted = this.config.muted;\r\n    let volume = 1;\r\n    if (this.video) {\r\n      ({ currentTime, duration, paused, muted, volume } = this.video);\r\n    }\r\n\r\n    this.__removeVideo();\r\n    this.video = texture.image;\r\n\r\n    // keep current time when switching resolution\r\n    if (this.video.duration === duration) {\r\n      this.video.currentTime = currentTime;\r\n    }\r\n\r\n    // keep volume\r\n    this.video.muted = muted;\r\n    this.video.volume = volume;\r\n\r\n    // play\r\n    if (!paused) {\r\n      this.video.play();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  disposeTexture(textureData) {\r\n    if (textureData.texture) {\r\n      const video = textureData.texture.image;\r\n      video.pause();\r\n      this.psv.container.removeChild(video);\r\n    }\r\n    textureData.texture?.dispose();\r\n  }\r\n\r\n  /**\r\n   * @summary Removes the current video element\r\n   * @private\r\n   */\r\n  __removeVideo() {\r\n    if (this.video) {\r\n      this.video.pause();\r\n      this.psv.container.removeChild(this.video);\r\n      delete this.video;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @summary Creates a new video element\r\n   * @memberOf PSV.adapters\r\n   * @param {string} src\r\n   * @return {HTMLVideoElement}\r\n   * @private\r\n   */\r\n  __createVideo(src) {\r\n    const video = document.createElement('video');\r\n    video.crossOrigin = this.psv.config.withCredentials ? 'use-credentials' : 'anonymous';\r\n    video.loop = true;\r\n    video.playsinline = true;\r\n    video.style.display = 'none';\r\n    video.muted = this.config.muted;\r\n    video.src = src;\r\n    video.preload = 'metadata';\r\n\r\n    this.psv.container.appendChild(video);\r\n\r\n    return video;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  __videoLoadPromise(video) {\r\n    const self = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      video.addEventListener('loadedmetadata', function onLoaded() {\r\n        if (this.video && video.duration === this.video.duration) {\r\n          resolve(self.__videoBufferPromise(video, this.video.currentTime));\r\n        }\r\n        else {\r\n          resolve();\r\n        }\r\n        video.removeEventListener('loadedmetadata', onLoaded);\r\n      });\r\n\r\n      video.addEventListener('error', function onError(err) {\r\n        reject(err);\r\n        video.removeEventListener('error', onError);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  __videoBufferPromise(video, currentTime) {\r\n    return new Promise((resolve) => {\r\n      function onBuffer() {\r\n        const buffer = video.buffered;\r\n        for (let i = 0, l = buffer.length; i < l; i++) {\r\n          if (buffer.start(i) <= video.currentTime && buffer.end(i) >= video.currentTime) {\r\n            video.pause();\r\n            video.removeEventListener('buffer', onBuffer);\r\n            video.removeEventListener('progress', onBuffer);\r\n            resolve();\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // try to reduce the switching time by preloading in advance\r\n      // FIXME find a better way ?\r\n      video.currentTime = Math.min(currentTime + 2000, video.duration.currentTime);\r\n      video.muted = true;\r\n\r\n      video.addEventListener('buffer', onBuffer);\r\n      video.addEventListener('progress', onBuffer);\r\n\r\n      video.play();\r\n    });\r\n  }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { CONSTANTS, PSVError, utils } from '../..';\r\nimport { AbstractVideoAdapter } from '../shared/AbstractVideoAdapter';\r\n\r\n/**\r\n * @typedef {Object} PSV.adapters.EquirectangularVideoAdapter.Video\r\n * @summary Object defining a video\r\n * @property {string} source\r\n */\r\n\r\n/**\r\n * @typedef {Object} PSV.adapters.EquirectangularVideoAdapter.Options\r\n * @property {boolean} [autoplay=false] - automatically start the video\r\n * @property {boolean} [muted=autoplay] - initially mute the video\r\n * @property {number} [resolution=64] - number of faces of the sphere geometry, higher values may decrease performances\r\n */\r\n\r\n\r\n/**\r\n * @summary Adapter for equirectangular videos\r\n * @memberof PSV.adapters\r\n * @extends PSV.adapters.AbstractAdapter\r\n */\r\nexport class EquirectangularVideoAdapter extends AbstractVideoAdapter {\r\n\r\n  static id = 'equirectangular-video';\r\n\r\n  /**\r\n   * @param {PSV.Viewer} psv\r\n   * @param {PSV.adapters.EquirectangularVideoAdapter.Options} options\r\n   */\r\n  constructor(psv, options) {\r\n    super(psv, {\r\n      resolution: 64,\r\n      ...options,\r\n    });\r\n\r\n    if (!utils.isPowerOfTwo(this.config.resolution)) {\r\n      throw new PSVError('EquirectangularVideoAdapter resolution must be power of two');\r\n    }\r\n\r\n    this.SPHERE_SEGMENTS = this.config.resolution;\r\n    this.SPHERE_HORIZONTAL_SEGMENTS = this.SPHERE_SEGMENTS / 2;\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   * @param {PSV.adapters.EquirectangularVideoAdapter.Video} panorama\r\n   * @returns {Promise.<PSV.TextureData>}\r\n   */\r\n  loadTexture(panorama) {\r\n    return super.loadTexture(panorama)\r\n      .then(({ texture }) => {\r\n        const video = texture.image;\r\n        const panoData = {\r\n          fullWidth    : video.videoWidth,\r\n          fullHeight   : video.videoHeight,\r\n          croppedWidth : video.videoWidth,\r\n          croppedHeight: video.videoHeight,\r\n          croppedX     : 0,\r\n          croppedY     : 0,\r\n          poseHeading  : 0,\r\n          posePitch    : 0,\r\n          poseRoll     : 0,\r\n        };\r\n\r\n        return { panorama, texture, panoData };\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  createMesh(scale = 1) {\r\n    const geometry = new THREE.SphereGeometry(\r\n      CONSTANTS.SPHERE_RADIUS * scale,\r\n      this.SPHERE_SEGMENTS,\r\n      this.SPHERE_HORIZONTAL_SEGMENTS,\r\n      -Math.PI / 2\r\n    )\r\n      .scale(-1, 1, 1);\r\n\r\n    const material = new THREE.MeshBasicMaterial();\r\n\r\n    return new THREE.Mesh(geometry, material);\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  setTexture(mesh, textureData) {\r\n    mesh.material.map?.dispose();\r\n    mesh.material.map = textureData.texture;\r\n\r\n    this.__switchVideo(textureData.texture);\r\n  }\r\n\r\n}\r\n"],"names":["AbstractVideoAdapter","psv","options","config","autoplay","muted","video","on","CONSTANTS","EVENTS","BEFORE_RENDER","destroy","off","__removeVideo","handleEvent","e","type","needsUpdate","loadTexture","panorama","source","Promise","reject","PSVError","getPlugin","__createVideo","__videoLoadPromise","then","texture","THREE","VideoTexture","__switchVideo","currentTime","duration","paused","volume","image","play","disposeTexture","textureData","pause","container","removeChild","dispose","src","document","createElement","crossOrigin","withCredentials","loop","playsinline","style","display","preload","appendChild","self","resolve","addEventListener","onLoaded","__videoBufferPromise","removeEventListener","onError","err","onBuffer","buffer","buffered","i","l","length","start","end","Math","min","AbstractAdapter","supportsTransition","supportsPreload","supportsDownload","EquirectangularVideoAdapter","resolution","utils","isPowerOfTwo","SPHERE_SEGMENTS","SPHERE_HORIZONTAL_SEGMENTS","panoData","fullWidth","videoWidth","fullHeight","videoHeight","croppedWidth","croppedHeight","croppedX","croppedY","poseHeading","posePitch","poseRoll","createMesh","scale","geometry","SphereGeometry","SPHERE_RADIUS","PI","material","MeshBasicMaterial","Mesh","setTexture","mesh","map","id"],"mappings":"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"}